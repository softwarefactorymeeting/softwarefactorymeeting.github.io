{"version":3,"sources":["angular-animate.js"],"names":["window","angular","undefined","assertArg","arg","name","reason","ngMinErr","mergeClasses","a","b","isArray","join","packageStyles","options","styles","to","from","pendClasses","classes","fix","isPrefix","className","isString","length","split","forEach","klass","i","removeFromArray","arr","val","index","indexOf","splice","stripCommentsFromElement","element","jqLite","nodeType","ELEMENT_NODE","extractElementNode","elm","$$addClass","$$jqLite","addClass","$$removeClass","removeClass","applyAnimationClassesFactory","prepareAnimationOptions","$$prepared","domOperation","noop","$$domOperationFired","applyAnimationStyles","applyAnimationFromStyles","applyAnimationToStyles","css","mergeAnimationDetails","oldAnimation","newAnimation","target","newOptions","toAdd","toRemove","resolveElementClasses","attr","preparationClasses","concatWithSpace","realDomOperation","extend","existing","splitClassesToLookup","obj","ADD_CLASS","REMOVE_CLASS","flags","value","key","prop","allow","getDomNode","applyGeneratedPreparationClasses","event","EVENT_CLASS_PREFIX","ADD_CLASS_SUFFIX","REMOVE_CLASS_SUFFIX","clearGeneratedClasses","activeClasses","blockTransitions","node","duration","applyInlineStyle","TRANSITION_DELAY_PROP","blockKeyframeAnimations","applyBlock","ANIMATION_PROP","ANIMATION_PLAYSTATE_KEY","styleTuple","style","getCssKeyframeDurationStyle","ANIMATION_DURATION_PROP","getCssDelayStyle","delay","isKeyframeAnimation","ANIMATION_DELAY_PROP","computeCssStyles","$window","properties","Object","create","detectedStyles","getComputedStyle","formalStyleName","actualStyleName","c","charAt","parseMaxTime","str","maxValue","values","substring","parseFloat","Math","max","truthyTimingValue","getCssTransitionDurationStyle","applyOnlyDuration","TRANSITION_PROP","DURATION_KEY","createLocalCacheLookup","cache","flush","count","entry","total","get","put","registerRestorableStyles","backup","isDefined","getPropertyValue","TRANSITIONEND_EVENT","ANIMATIONEND_EVENT","copy","isObject","isUndefined","isFunction","isElement","ACTIVE_CLASS_SUFFIX","PREPARE_CLASS_SUFFIX","NG_ANIMATE_CLASSNAME","NG_ANIMATE_CHILDREN_DATA","CSS_PREFIX","ontransitionend","onwebkittransitionend","onanimationend","onwebkitanimationend","PROPERTY_KEY","DELAY_KEY","TIMING_KEY","ANIMATION_ITERATION_COUNT_KEY","SAFE_FAST_FORWARD_DURATION_VALUE","TRANSITION_DURATION_PROP","$$minErr","$$rAFSchedulerFactory","$$rAF","scheduler","tasks","queue","concat","nextTick","items","shift","cancelFn","waitUntilQuiet","fn","$$AnimateChildrenDirective","$interpolate","link","scope","attrs","setData","data","ngAnimateChildren","$observe","ANIMATE_TIMER_KEY","ONE_SECOND","ELAPSED_TIME_MAX_DECIMAL_PLACES","CLOSING_TIME_BUFFER","DETECT_CSS_PROPERTIES","transitionDuration","transitionDelay","transitionProperty","animationDuration","animationDelay","animationIterationCount","DETECT_STAGGER_CSS_PROPERTIES","$AnimateCssProvider","$animateProvider","gcsLookup","gcsStaggerLookup","this","$get","$$AnimateRunner","$timeout","$$forceReflow","$sniffer","$$rAFScheduler","$$animateQueue","gcsHashFn","extraClasses","KEY","parentNode","parentID","parentCounter","getAttribute","computeCachedCssStyles","cacheKey","timings","computeCachedCssStaggerStyles","stagger","staggerClassName","callback","rafWaitQueue","push","pageWidth","computeTimings","aD","tD","maxDelay","maxDuration","applyAnimationClasses","initialOptions","endFn","close","rejected","animationClosed","animationCompleted","animationPaused","$$skipPreparationClasses","temporaryStyles","keys","restoreStyles","setProperty","removeProperty","onDone","events","off","onAnimationProgress","animationTimerData","cancel","timer","removeData","runner","complete","applyBlocking","blockTransition","blockKeyframeAnimation","closeAndReturnNoopAnimator","end","$$willAnimate","start","stopPropagation","ev","originalEvent","timeStamp","$manualTimeStamp","Date","now","elapsedTime","toFixed","startTime","maxDelayTime","triggerAnimationStart","recalculateTimingStyles","fullClassName","relativeDelay","hasTransitions","hasAnimations","applyAnimationDelay","delayStyle","maxDurationTime","easing","easeProp","easeVal","timerTime","endTime","animationsData","setupFallbackTimer","currentTimerData","expectedEndTime","onAnimationExpired","on","cleanupStyles","playPause","playAnimation","maxStagger","itemIndex","floor","runnerHost","resume","pause","enabled","animations","transitions","method","isStructural","structural","structuralClassName","addRemoveClassName","applyClassesEarly","trim","hasToStyles","containsKeyframeAnimation","keyframeStyle","staggerVal","transitionStyle","durationStyle","staggerIndex","isFirst","skipBlocking","hasTransitionAll","applyTransitionDuration","applyAnimationDuration","applyTransitionDelay","$$AnimateCssDriverProvider","$$animationProvider","isDocumentFragment","drivers","NG_ANIMATE_SHIM_CLASS_NAME","NG_ANIMATE_ANCHOR_CLASS_NAME","NG_OUT_ANCHOR_CLASS_NAME","NG_IN_ANCHOR_CLASS_NAME","$animateCss","$rootScope","$rootElement","$document","filterCssClasses","replace","getUniqueValues","filter","prepareAnchoredAnimation","outAnchor","inAnchor","calculateAnchorStyles","anchor","coords","getBoundingClientRect","bodyNode","scrollTop","scrollLeft","prepareOutAnimation","animator","clone","getClassVal","prepareInAnimation","endingClasses","startingClasses","remove","cloneNode","rootBodyElement","append","animatorIn","animatorOut","startingAnimator","currentAnimation","done","prepareFromToAnchorAnimation","anchors","fromAnimation","prepareRegularAnimation","toAnimation","anchorAnimations","outElement","inElement","animationRunners","animation","all","status","animationDetails","body","rootNode","contains","$$AnimateJsProvider","$injector","lookupAnimations","matches","flagMap","animationFactory","$$registeredAnimations","applyOptions","executeAnimationFn","args","classesToAdd","classesToRemove","apply","groupEventedAnimations","fnName","operations","ani","endProgressCb","resolved","onAnimationComplete","result","cancelled","packageAnimations","runners","animateFn","reject","arguments","before","after","afterFn","beforeFn","toUpperCase","substr","onComplete","success","endAnimations","closeActiveAnimations","chain","setHost","$$AnimateJsDriverProvider","$$animateJs","prepareAnimation","endFnFactory","NG_ANIMATE_ATTR_NAME","NG_ANIMATE_PIN_DATA","$$AnimateQueueProvider","makeTruthyCssClassMap","classString","ONE_SPACE","map","hasMatchingClasses","newClassString","currentClassString","currentClassMap","some","isAllowed","ruleType","previousAnimation","rules","hasAnimationClasses","and","PRE_DIGEST_STATE","RUNNING_STATE","skip","state","nA","nR","cA","cR","$$HashMap","$$animation","$templateRequest","postDigestTaskFactory","postDigestCalled","$$postDigest","normalizeAnimationDetails","findCallbacks","parent","targetNode","targetParentNode","entries","callbackRegistry","call","queueAnimation","notifyProgress","phase","runInNextPostDigestOrNow","callbacks","progress","isAnimatableClassName","skipAnimations","animationsEnabled","hidden","disabledElementsLookup","existingAnimation","activeAnimationsLookup","hasExistingAnimation","areAnimationsAllowed","closeChildAnimations","skipAnimationFlag","cancelAnimationFlag","joinAnimationFlag","isValidAnimation","clearElementAnimationState","counter","markElementAnimationState","animationCancelled","parentElement","realRunner","children","querySelectorAll","child","parseInt","removeAttribute","isMatchingElement","nodeOrElmA","nodeOrElmB","animateChildren","bodyElement","bodyElementDetected","nodeName","rootElementDetected","parentAnimationDetected","elementDisabled","parentHost","details","parentElementDisabled","allowAnimation","setAttribute","oldValue","newValue","deregisterWatch","$watch","totalPendingRequests","isEmpty","classNameFilter","test","Node","prototype","compareDocumentPosition","container","filterFromRegistry","list","matchContainer","matchCallback","containerNode","isMatch","pin","bool","argCount","hasElement","recordExists","$$AnimationProvider","setRunner","RUNNER_STORAGE_KEY","removeRunner","getRunner","NG_ANIMATE_REF_ATTR","sortAnimations","processNode","processed","elementNode","domNode","lookup","parentEntry","tree","flatten","remainingLevelEntries","nextLevelEntries","row","childEntry","animationQueue","getAnchorNodes","SELECTOR","hasAttribute","groupAnimations","preparedAnimations","refLookup","enterOrMove","anchorNodes","direction","animationID","usedIndicesLookup","anchorGroups","indexKey","toString","lookupKey","group","beforeStart","cssClassesIntersection","out","in","aa","j","invokeFirstDriver","driverName","has","factory","driver","tempClasses","prepareClassName","updateAnimationRunners","newRunner","update","handleDestroyedElement","groupedAnimations","toBeSortedAnimations","animationEntry","startAnimationFn","closeFn","targetElement","operation","animationRunner","ngAnimateSwapDirective","$animate","restrict","transclude","terminal","priority","$element","ctrl","$transclude","previousElement","previousScope","$watchCollection","ngAnimateSwap","leave","$destroy","$new","enter","module","directive","provider"],"mappings":"CAKA,SAAUA,EAAQC,EAASC,GAAY,YA4EvC,SAASC,GAAUC,EAAKC,EAAMC,GAC5B,IAAKF,EACH,KAAMG,IAAS,OAAQ,wBAA0BF,GAAQ,IAAOC,GAAU,WAE5E,OAAOF,GAGT,QAASI,GAAaC,EAAEC,GACtB,MAAKD,IAAMC,EACND,EACAC,GACDC,EAAQF,KAAIA,EAAIA,EAAEG,KAAK,MACvBD,EAAQD,KAAIA,EAAIA,EAAEE,KAAK,MACpBH,EAAI,IAAMC,GAHFD,EADAC,EADM,GAQvB,QAASG,GAAcC,GACrB,GAAIC,KAKJ,OAJID,KAAYA,EAAQE,IAAMF,EAAQG,QACpCF,EAAOC,GAAKF,EAAQE,GACpBD,EAAOE,KAAOH,EAAQG,MAEjBF,EAGT,QAASG,GAAYC,EAASC,EAAKC,GACjC,GAAIC,GAAY,EAahB,OAZAH,GAAUR,EAAQQ,GACZA,EACAA,GAAWI,EAASJ,IAAYA,EAAQK,OACpCL,EAAQM,MAAM,UAExBC,EAAQP,EAAS,SAASQ,EAAOC,GAC3BD,GAASA,EAAMH,OAAS,IAC1BF,GAAcM,EAAI,EAAK,IAAM,GAC7BN,GAAaD,EAAWD,EAAMO,EACNA,EAAQP,KAG7BE,EAGT,QAASO,GAAgBC,EAAKC,GAC5B,GAAIC,GAAQF,EAAIG,QAAQF,EACpBA,IAAO,GACTD,EAAII,OAAOF,EAAO,GAItB,QAASG,GAAyBC,GAChC,GAAIA,YAAmBC,GACrB,OAAQD,EAAQZ,QACd,IAAK,GACH,QAGF,KAAK,GAIH,GAAIY,EAAQ,GAAGE,WAAaC,EAC1B,MAAOH,EAET,MAEF,SACE,MAAOC,GAAOG,EAAmBJ,IAKvC,MAAIA,GAAQE,WAAaC,EAChBF,EAAOD,GADhB,OAKF,QAASI,GAAmBJ,GAC1B,IAAKA,EAAQ,GAAI,MAAOA,EACxB,KAAK,GAAIR,GAAI,EAAGA,EAAIQ,EAAQZ,OAAQI,IAAK,CACvC,GAAIa,GAAML,EAAQR,EAClB,IAAIa,EAAIH,UAAYC,EAClB,MAAOE,IAKb,QAASC,GAAWC,EAAUP,EAASd,GACrCI,EAAQU,EAAS,SAASK,GACxBE,EAASC,SAASH,EAAKnB,KAI3B,QAASuB,GAAcF,EAAUP,EAASd,GACxCI,EAAQU,EAAS,SAASK,GACxBE,EAASG,YAAYL,EAAKnB,KAI9B,QAASyB,GAA6BJ,GACpC,MAAO,UAASP,EAAStB,GACnBA,EAAQ8B,WACVF,EAAWC,EAAUP,EAAStB,EAAQ8B,UACtC9B,EAAQ8B,SAAW,MAEjB9B,EAAQgC,cACVD,EAAcF,EAAUP,EAAStB,EAAQgC,aACzChC,EAAQgC,YAAc,OAK5B,QAASE,GAAwBlC,GAE/B,GADAA,EAAUA,OACLA,EAAQmC,WAAY,CACvB,GAAIC,GAAepC,EAAQoC,cAAgBC,CAC3CrC,GAAQoC,aAAe,WACrBpC,EAAQsC,qBAAsB,EAC9BF,IACAA,EAAeC,GAEjBrC,EAAQmC,YAAa,EAEvB,MAAOnC,GAGT,QAASuC,GAAqBjB,EAAStB,GACrCwC,EAAyBlB,EAAStB,GAClCyC,EAAuBnB,EAAStB,GAGlC,QAASwC,GAAyBlB,EAAStB,GACrCA,EAAQG,OACVmB,EAAQoB,IAAI1C,EAAQG,MACpBH,EAAQG,KAAO,MAInB,QAASsC,GAAuBnB,EAAStB,GACnCA,EAAQE,KACVoB,EAAQoB,IAAI1C,EAAQE,IACpBF,EAAQE,GAAK,MAIjB,QAASyC,GAAsBrB,EAASsB,EAAcC,GACpD,GAAIC,GAASF,EAAa5C,YACtB+C,EAAaF,EAAa7C,YAE1BgD,GAASF,EAAOhB,UAAY,IAAM,KAAOiB,EAAWjB,UAAY,IAChEmB,GAAYH,EAAOd,aAAe,IAAM,KAAOe,EAAWf,aAAe,IACzE3B,EAAU6C,EAAsB5B,EAAQ6B,KAAK,SAAUH,EAAOC,EAE9DF,GAAWK,qBACbN,EAAOM,mBAAqBC,EAAgBN,EAAWK,mBAAoBN,EAAOM,0BAC3EL,GAAWK,mBAIpB,IAAIE,GAAmBR,EAAOV,eAAiBC,EAAOS,EAAOV,aAAe,IAwB5E,OAtBAmB,GAAOT,EAAQC,GAGXO,IACFR,EAAOV,aAAekB,GAGpBjD,EAAQyB,SACVgB,EAAOhB,SAAWzB,EAAQyB,SAE1BgB,EAAOhB,SAAW,KAGhBzB,EAAQ2B,YACVc,EAAOd,YAAc3B,EAAQ2B,YAE7Bc,EAAOd,YAAc,KAGvBY,EAAad,SAAWgB,EAAOhB,SAC/Bc,EAAaZ,YAAcc,EAAOd,YAE3Bc,EAGT,QAASI,GAAsBM,EAAUR,EAAOC,GAuC9C,QAASQ,GAAqBpD,GACxBI,EAASJ,KACXA,EAAUA,EAAQM,MAAM,KAG1B,IAAI+C,KAQJ,OAPA9C,GAAQP,EAAS,SAASQ,GAGpBA,EAAMH,SACRgD,EAAI7C,IAAS,KAGV6C,EAnDT,GAAIC,GAAY,EACZC,EAAe,GAEfC,IACJL,GAAWC,EAAqBD,GAEhCR,EAAQS,EAAqBT,GAC7BpC,EAAQoC,EAAO,SAASc,EAAOC,GAC7BF,EAAME,GAAOJ,IAGfV,EAAWQ,EAAqBR,GAChCrC,EAAQqC,EAAU,SAASa,EAAOC,GAChCF,EAAME,GAAOF,EAAME,KAASJ,EAAY,KAAOC,GAGjD,IAAIvD,IACFyB,SAAU,GACVE,YAAa,GAoCf,OAjCApB,GAAQiD,EAAO,SAAS5C,EAAKJ,GAC3B,GAAImD,GAAMC,CACNhD,KAAQ0C,GACVK,EAAO,WACPC,GAAST,EAAS3C,IACTI,IAAQ2C,IACjBI,EAAO,cACPC,EAAQT,EAAS3C,IAEfoD,IACE5D,EAAQ2D,GAAMtD,SAChBL,EAAQ2D,IAAS,KAEnB3D,EAAQ2D,IAASnD,KAoBdR,EAGT,QAAS6D,GAAW5C,GAClB,MAAQA,aAAmBnC,GAAQmC,QAAWA,EAAQ,GAAKA,EAG7D,QAAS6C,GAAiC7C,EAAS8C,EAAOpE,GACxD,GAAIK,GAAU,EACV+D,KACF/D,EAAUD,EAAYgE,EAAOC,GAAoB,IAE/CrE,EAAQ8B,WACVzB,EAAUgD,EAAgBhD,EAASD,EAAYJ,EAAQ8B,SAAUwC,KAE/DtE,EAAQgC,cACV3B,EAAUgD,EAAgBhD,EAASD,EAAYJ,EAAQgC,YAAauC,KAElElE,EAAQK,SACVV,EAAQoD,mBAAqB/C,EAC7BiB,EAAQQ,SAASzB,IAIrB,QAASmE,GAAsBlD,EAAStB,GAClCA,EAAQoD,qBACV9B,EAAQU,YAAYhC,EAAQoD,oBAC5BpD,EAAQoD,mBAAqB,MAE3BpD,EAAQyE,gBACVnD,EAAQU,YAAYhC,EAAQyE,eAC5BzE,EAAQyE,cAAgB,MAI5B,QAASC,GAAiBC,EAAMC,GAI9B,GAAId,GAAQc,EAAW,IAAMA,EAAW,IAAM,EAE9C,OADAC,GAAiBF,GAAOG,GAAuBhB,KACvCgB,GAAuBhB,GAGjC,QAASiB,GAAwBJ,EAAMK,GACrC,GAAIlB,GAAQkB,EAAa,SAAW,GAChCjB,EAAMkB,EAAiBC,EAE3B,OADAL,GAAiBF,GAAOZ,EAAKD,KACrBC,EAAKD,GAGf,QAASe,GAAiBF,EAAMQ,GAC9B,GAAInB,GAAOmB,EAAW,GAClBrB,EAAQqB,EAAW,EACvBR,GAAKS,MAAMpB,GAAQF,EAGrB,QAAST,GAAgB1D,EAAEC,GACzB,MAAKD,GACAC,EACED,EAAI,IAAMC,EADFD,EADAC,EAuYjB,QAASyF,GAA4BT,GACnC,OAAQU,GAAyBV,EAAW,KAG9C,QAASW,GAAiBC,EAAOC,GAC/B,GAAIzB,GAAOyB,EAAsBC,GAAuBZ,EACxD,QAAQd,EAAMwB,EAAQ,KAGxB,QAASG,GAAiBC,EAAStE,EAASuE,GAC1C,GAAI5F,GAAS6F,OAAOC,OAAO,MACvBC,EAAiBJ,EAAQK,iBAAiB3E,MAqB9C,OApBAV,GAAQiF,EAAY,SAASK,EAAiBC,GAC5C,GAAIlF,GAAM+E,EAAeE,EACzB,IAAIjF,EAAK,CACP,GAAImF,GAAInF,EAAIoF,OAAO,IAGT,MAAND,GAAmB,MAANA,GAAaA,GAAK,KACjCnF,EAAMqF,EAAarF,IAMT,IAARA,IACFA,EAAM,MAERhB,EAAOkG,GAAmBlF,KAIvBhB,EAGT,QAASqG,GAAaC,GACpB,GAAIC,GAAW,EACXC,EAASF,EAAI5F,MAAM,UAUvB,OATAC,GAAQ6F,EAAQ,SAAS3C,GAGe,KAAlCA,EAAMuC,OAAOvC,EAAMpD,OAAS,KAC9BoD,EAAQA,EAAM4C,UAAU,EAAG5C,EAAMpD,OAAS,IAE5CoD,EAAQ6C,WAAW7C,IAAU,EAC7B0C,EAAWA,EAAWI,KAAKC,IAAI/C,EAAO0C,GAAY1C,IAE7C0C,EAGT,QAASM,GAAkB7F,GACzB,MAAe,KAARA,GAAoB,MAAPA,EAGtB,QAAS8F,GAA8BnC,EAAUoC,GAC/C,GAAI5B,GAAQ6B,EACRnD,EAAQc,EAAW,GAMvB,OALIoC,GACF5B,GAAS8B,GAETpD,GAAS,eAEHsB,EAAOtB,GAGjB,QAASqD,KACP,GAAIC,GAAQtB,OAAOC,OAAO,KAC1B,QACEsB,MAAO,WACLD,EAAQtB,OAAOC,OAAO,OAGxBuB,MAAO,SAASvD,GACd,GAAIwD,GAAQH,EAAMrD,EAClB,OAAOwD,GAAQA,EAAMC,MAAQ,GAG/BC,IAAK,SAAS1D,GACZ,GAAIwD,GAAQH,EAAMrD,EAClB,OAAOwD,IAASA,EAAMzD,OAGxB4D,IAAK,SAAS3D,EAAKD,GACZsD,EAAMrD,GAGTqD,EAAMrD,GAAKyD,QAFXJ,EAAMrD,IAASyD,MAAO,EAAG1D,MAAOA,KAiBxC,QAAS6D,GAAyBC,EAAQjD,EAAMkB,GAC9CjF,EAAQiF,EAAY,SAAS7B,GAC3B4D,EAAO5D,GAAQ6D,EAAUD,EAAO5D,IAC1B4D,EAAO5D,GACPW,EAAKS,MAAM0C,iBAAiB9D,KAn2BtC,GA0BqBiD,GAAiBc,EAAqB9C,EAAgB+C,EA1BvE3F,EAAclD,EAAQkD,KACtB4F,EAAc9I,EAAQ8I,KACtB1E,EAAcpE,EAAQoE,OACtBhC,EAAcpC,EAAQmC,QACtBV,EAAczB,EAAQyB,QACtBf,EAAcV,EAAQU,QACtBY,EAActB,EAAQsB,SACtByH,EAAc/I,EAAQ+I,SACtBC,EAAchJ,EAAQgJ,YACtBN,EAAc1I,EAAQ0I,UACtBO,EAAcjJ,EAAQiJ,WACtBC,EAAclJ,EAAQkJ,UAEtB5G,EAAe,EAGf6C,EAAmB,OACnBC,EAAsB,UACtBF,EAAqB,MACrBiE,GAAsB,UACtBC,GAAuB,WAEvBC,GAAuB,aACvBC,GAA2B,sBAG3BC,GAAa,EAWbP,GAAYjJ,EAAOyJ,kBAAoBd,EAAU3I,EAAO0J,wBAC1DF,GAAa,WACbzB,EAAkB,mBAClBc,EAAsB,sCAEtBd,EAAkB,aAClBc,EAAsB,iBAGpBI,EAAYjJ,EAAO2J,iBAAmBhB,EAAU3I,EAAO4J,uBACzDJ,GAAa,WACbzD,EAAiB,kBACjB+C,EAAqB,oCAErB/C,EAAiB,YACjB+C,EAAqB,eAGvB,IAAId,IAAe,WACf6B,GAAe,WACfC,GAAY,QACZC,GAAa,iBACbC,GAAgC,iBAChChE,GAA0B,YAC1BiE,GAAmC,KAEnCzD,GAAuBT,EAAiB+D,GACxC1D,GAA0BL,EAAiBiC,GAC3CpC,GAAwBmC,EAAkB+B,GAC1CI,GAA2BnC,EAAkBC,GAM7CzH,GAAWN,EAAQkK,SAAS,MAgT5BC,IAAyB,QAAS,SAASC,GAG7C,QAASC,GAAUC,GAIjBC,EAAQA,EAAMC,OAAOF,GACrBG,IAyBF,QAASA,KACP,GAAKF,EAAMhJ,OAAX,CAGA,IAAK,GADDmJ,GAAQH,EAAMI,QACThJ,EAAI,EAAGA,EAAI+I,EAAMnJ,OAAQI,IAChC+I,EAAM/I,IAGHiJ,IACHR,EAAM,WACCQ,GAAUH,OA1CrB,GAAIF,GAAOK,CA8BX,OApBAL,GAAQF,EAAUE,SAUlBF,EAAUQ,eAAiB,SAASC,GAC9BF,GAAUA,IAEdA,EAAWR,EAAM,WACfQ,EAAW,KACXE,IACAL,OAIGJ,IAgGLU,IAA8B,eAAgB,SAASC,GACzD,OACEC,KAAM,SAASC,EAAO/I,EAASgJ,GAW7B,QAASC,GAAQzG,GACfA,EAAkB,OAAVA,GAA4B,SAAVA,EAC1BxC,EAAQkJ,KAAK/B,GAA0B3E,GAZzC,GAAI7C,GAAMqJ,EAAMG,iBACZtL,GAAQsB,SAASQ,IAAuB,IAAfA,EAAIP,OAC/BY,EAAQkJ,KAAK/B,IAA0B,IAIvC8B,EAAQJ,EAAalJ,GAAKoJ,IAC1BC,EAAMI,SAAS,oBAAqBH,QAWxCI,GAAoB,eAwNpBC,GAAa,IAGbC,GAAkC,EAClCC,GAAsB,IAEtBC,IACFC,mBAAyB5B,GACzB6B,gBAAyBnG,GACzBoG,mBAAyBjE,EAAkB8B,GAC3CoC,kBAAyB7F,GACzB8F,eAAyB1F,GACzB2F,wBAAyBpG,EAAiBiE,IAGxCoC,IACFN,mBAAyB5B,GACzB6B,gBAAyBnG,GACzBqG,kBAAyB7F,GACzB8F,eAAyB1F,IAgHvB6F,IAAuB,mBAAoB,SAASC,GACtD,GAAIC,GAAYtE,IACZuE,EAAmBvE,GAEvBwE,MAAKC,MAAQ,UAAW,WAAY,kBAAmB,WAC1C,gBAAiB,WAAY,iBAAkB,iBACvD,SAAShG,EAAW/D,EAAYgK,EAAmBC,EAC1CC,EAAiBC,EAAYC,EAAgBC,GAKzD,QAASC,GAAUxH,EAAMyH,GACvB,GAAIC,GAAM,uBACNC,EAAa3H,EAAK2H,WAClBC,EAAWD,EAAWD,KAASC,EAAWD,KAASG,EACvD,OAAOD,GAAW,IAAM5H,EAAK8H,aAAa,SAAW,IAAML,EAG7D,QAASM,GAAuB/H,EAAMnE,EAAWmM,EAAU9G,GACzD,GAAI+G,GAAUnB,EAAUhE,IAAIkF,EAY5B,OAVKC,KACHA,EAAUjH,EAAiBC,EAASjB,EAAMkB,GACF,aAApC+G,EAAQvB,0BACVuB,EAAQvB,wBAA0B,IAMtCI,EAAU/D,IAAIiF,EAAUC,GACjBA,EAGT,QAASC,GAA8BlI,EAAMnE,EAAWmM,EAAU9G,GAChE,GAAIiH,EAKJ,IAAIrB,EAAUnE,MAAMqF,GAAY,IAC9BG,EAAUpB,EAAiBjE,IAAIkF,IAE1BG,GAAS,CACZ,GAAIC,GAAmB3M,EAAYI,EAAW,WAE9CqB,GAASC,SAAS6C,EAAMoI,GAExBD,EAAUnH,EAAiBC,EAASjB,EAAMkB,GAG1CiH,EAAQ3B,kBAAoBvE,KAAKC,IAAIiG,EAAQ3B,kBAAmB,GAChE2B,EAAQ9B,mBAAqBpE,KAAKC,IAAIiG,EAAQ9B,mBAAoB,GAElEnJ,EAASG,YAAY2C,EAAMoI,GAE3BrB,EAAiBhE,IAAIiF,EAAUG,GAInC,MAAOA,OAKT,QAAS9C,GAAegD,GACtBC,EAAaC,KAAKF,GAClBf,EAAejC,eAAe,WAC5ByB,EAAUpE,QACVqE,EAAiBrE,OAQjB,KAAK,GAJD8F,GAAYpB,IAIPjL,EAAI,EAAGA,EAAImM,EAAavM,OAAQI,IACvCmM,EAAanM,GAAGqM,EAElBF,GAAavM,OAAS,IAI1B,QAAS0M,GAAezI,EAAMnE,EAAWmM,GACvC,GAAIC,GAAUF,EAAuB/H,EAAMnE,EAAWmM,EAAU5B,IAC5DsC,EAAKT,EAAQxB,eACbkC,EAAKV,EAAQ3B,eAQjB,OAPA2B,GAAQW,SAAWF,GAAMC,EACnB1G,KAAKC,IAAIwG,EAAIC,GACZD,GAAMC,EACbV,EAAQY,YAAc5G,KAAKC,IACvB+F,EAAQzB,kBAAoByB,EAAQvB,wBACpCuB,EAAQ5B,oBAEL4B,EAvFT,GAAIa,GAAwBxL,EAA6BJ,GAErD2K,EAAgB,EAsDhBS,IAkCJ,OAAO,UAAc3L,EAASoM,GAgQ5B,QAASC,KACPC,IAGF,QAAS7D,KACP6D,GAAM,GAGR,QAASA,GAAMC,GAGb,KAAIC,GAAoBC,GAAsBC,GAA9C,CACAF,GAAkB,EAClBE,GAAkB,EAEbhO,EAAQiO,0BACXpM,EAASG,YAAYV,EAAS8B,IAEhCvB,EAASG,YAAYV,EAASmD,IAE9BM,EAAwBJ,GAAM,GAC9BD,EAAiBC,GAAM,GAEvB/D,EAAQsN,GAAiB,SAAS3G,GAIhC5C,EAAKS,MAAMmC,EAAM,IAAM,KAGzBkG,EAAsBnM,EAAStB,GAC/BuC,EAAqBjB,EAAStB,GAE1B8F,OAAOqI,KAAKC,GAAe1N,QAC7BE,EAAQwN,EAAe,SAAStK,EAAOE,GACrCF,EAAQa,EAAKS,MAAMiJ,YAAYrK,EAAMF,GAC7Ba,EAAKS,MAAMkJ,eAAetK,KASlChE,EAAQuO,QACVvO,EAAQuO,SAGNC,IAAUA,GAAO9N,QAEnBY,EAAQmN,IAAID,GAAO1O,KAAK,KAAM4O,EAIhC,IAAIC,GAAqBrN,EAAQkJ,KAAKG,GAClCgE,KACF7C,EAAS8C,OAAOD,EAAmB,GAAGE,OACtCvN,EAAQwN,WAAWnE,KAIjBoE,GACFA,EAAOC,UAAUnB,IAIrB,QAASoB,GAAcrK,GACjBf,GAAMqL,iBACRxK,EAAiBC,EAAMC,GAGrBf,GAAMsL,wBACRpK,EAAwBJ,IAAQC,GAIpC,QAASwK,KAUP,MATAL,GAAS,GAAIlD,IACXwD,IAAK1B,EACLiB,OAAQ7E,IAIVC,EAAe3H,GACfuL,KAGE0B,eAAe,EACfC,MAAO,WACL,MAAOR,IAETM,IAAK1B,GAIT,QAASe,GAAoBtK,GAC3BA,EAAMoL,iBACN,IAAIC,GAAKrL,EAAMsL,eAAiBtL,EAI5BuL,EAAYF,EAAGG,kBAAoBC,KAAKC,MAIxCC,EAAcpJ,WAAW8I,EAAGM,YAAYC,QAAQnF,IAShDjE,MAAKC,IAAI8I,EAAYM,GAAW,IAAMC,IAAgBH,GAAevC,KAGvEO,GAAqB,EACrBH,KAIJ,QAAS2B,KAkDP,QAASY,KAGP,IAAIrC,EAAJ,CAaA,GAXAmB,GAAc,GAEdrO,EAAQsN,GAAiB,SAAS3G,GAChC,GAAIxD,GAAMwD,EAAM,GACZzD,EAAQyD,EAAM,EAClB5C,GAAKS,MAAMrB,GAAOD,IAGpB2J,EAAsBnM,EAAStB,GAC/B6B,EAASC,SAASR,EAASmD,IAEvBZ,GAAMuM,wBAAyB,CASjC,GARAC,GAAgB1L,EAAKnE,UAAY,IAAM4C,GACvCuJ,GAAWR,EAAUxH,EAAM0L,IAE3BzD,GAAUQ,EAAezI,EAAM0L,GAAe1D,IAC9C2D,GAAgB1D,GAAQW,SACxBA,GAAW3G,KAAKC,IAAIyJ,GAAe,GACnC9C,GAAcZ,GAAQY,YAEF,IAAhBA,GAEF,WADAI,IAIF/J,IAAM0M,eAAiB3D,GAAQ5B,mBAAqB,EACpDnH,GAAM2M,cAAgB5D,GAAQzB,kBAAoB,EAkBpD,GAfItH,GAAM4M,sBACRH,GAAyC,iBAAlBtQ,GAAQwF,OAAuBsB,EAAkB9G,EAAQwF,OACxEmB,WAAW3G,EAAQwF,OACnB8K,GAER/C,GAAW3G,KAAKC,IAAIyJ,GAAe,GACnC1D,GAAQxB,eAAiBkF,GACzBI,GAAanL,EAAiB+K,IAAe,GAC7CpC,GAAgBhB,KAAKwD,IACrB/L,EAAKS,MAAMsL,GAAW,IAAMA,GAAW,IAGzCR,GAAe3C,GAAW3C,GAC1B+F,GAAkBnD,GAAc5C,GAE5B5K,EAAQ4Q,OAAQ,CAClB,GAAIC,GAAUC,EAAU9Q,EAAQ4Q,MAC5B/M,IAAM0M,iBACRM,EAAW5J,EAAkBgC,GAC7BiF,GAAgBhB,MAAM2D,EAAUC,IAChCnM,EAAKS,MAAMyL,GAAYC,GAErBjN,GAAM2M,gBACRK,EAAW5L,EAAiBgE,GAC5BiF,GAAgBhB,MAAM2D,EAAUC,IAChCnM,EAAKS,MAAMyL,GAAYC,GAIvBlE,GAAQ5B,oBACVwD,GAAOtB,KAAKnF,GAGV6E,GAAQzB,mBACVqD,GAAOtB,KAAKlF,GAGdiI,GAAYJ,KAAKC,KACjB,IAAIiB,GAAYb,GAAepF,GAAsB6F,GACjDK,EAAUf,GAAYc,EAEtBE,EAAiB3P,EAAQkJ,KAAKG,QAC9BuG,GAAqB,CACzB,IAAID,EAAevQ,OAAQ,CACzB,GAAIyQ,GAAmBF,EAAe,EACtCC,GAAqBF,EAAUG,EAAiBC,gBAC5CF,EACFpF,EAAS8C,OAAOuC,EAAiBtC,OAEjCoC,EAAe/D,KAAKU,GAIxB,GAAIsD,EAAoB,CACtB,GAAIrC,GAAQ/C,EAASuF,EAAoBN,GAAW,EACpDE,GAAe,IACbpC,MAAOA,EACPuC,gBAAiBJ,GAEnBC,EAAe/D,KAAKU,GACpBtM,EAAQkJ,KAAKG,GAAmBsG,GAG9BzC,GAAO9N,QACTY,EAAQgQ,GAAG9C,GAAO1O,KAAK,KAAM4O,GAG3B1O,EAAQE,KACNF,EAAQuR,eACV5J,EAAyByG,EAAezJ,EAAMmB,OAAOqI,KAAKnO,EAAQE,KAEpEuC,EAAuBnB,EAAStB,KAIpC,QAASqR,KACP,GAAIJ,GAAiB3P,EAAQkJ,KAAKG,GAKlC,IAAIsG,EAAgB,CAClB,IAAK,GAAInQ,GAAI,EAAGA,EAAImQ,EAAevQ,OAAQI,IACzCmQ,EAAenQ,IAEjBQ,GAAQwN,WAAWnE,KAxKvB,IAAImD,EAAJ,CACA,IAAKnJ,EAAK2H,WAER,WADAsB,IAQF,IAAI4D,GAAY,SAASC,GACvB,GAAK1D,EAQMC,GAAmByD,IAC5BzD,GAAkB,EAClBJ,SARA,IADAI,GAAmByD,EACf7E,GAAQzB,kBAAmB,CAC7B,GAAIrH,GAAQiB,EAAwBJ,EAAMqJ,EAC1CA,GACME,GAAgBhB,KAAKpJ,GACrB/C,EAAgBmN,GAAiBpK,KAWzC4N,EAAaC,GAAY,IACP/E,GAAQ5B,oBAAqD,IAA/B8B,GAAQ9B,oBACvC4B,GAAQzB,mBAAmD,IAA9B2B,GAAQ3B,oBACtCvE,KAAKC,IAAIiG,GAAQ1B,eAAgB0B,GAAQ7B,gBACzDyG,GACF5F,EAASqE,EACAvJ,KAAKgL,MAAMF,EAAaC,GAAY/G,KACpC,GAETuF,IAIF0B,GAAWC,OAAS,WAClBN,GAAU,IAGZK,GAAWE,MAAQ,WACjBP,GAAU,KArad,GAAIxR,GAAU0N,KACT1N,GAAQmC,aACXnC,EAAUkC,EAAwB+F,EAAKjI,IAGzC,IAAIoO,MACAzJ,EAAOT,EAAW5C,EACtB,KAAKqD,IACGA,EAAK2H,aACLJ,EAAe8F,UACrB,MAAO5C,IAGT,IAGItB,GACAE,EACAD,EACAgB,EACA8C,GACAtE,GACA2C,GACA1C,GACAmD,GACAV,GAZA/B,MACA7N,GAAUiB,EAAQ6B,KAAK,SACvBlD,GAASF,EAAcC,GAWvBwO,KAEJ,IAAyB,IAArBxO,EAAQ4E,WAAoBoH,EAASiG,aAAejG,EAASkG,YAC/D,MAAO9C,IAGT,IAAI+C,IAASnS,EAAQoE,OAASvE,EAAQG,EAAQoE,OACtCpE,EAAQoE,MAAMtE,KAAK,KACnBE,EAAQoE,MAEZgO,GAAeD,IAAUnS,EAAQqS,WACjCC,GAAsB,GACtBC,GAAqB,EAErBH,IACFE,GAAsBlS,EAAY+R,GAAQ9N,GAAoB,GACrD8N,KACTG,GAAsBH,IAGpBnS,EAAQ8B,WACVyQ,IAAsBnS,EAAYJ,EAAQ8B,SAAUwC,IAGlDtE,EAAQgC,cACNuQ,GAAmB7R,SACrB6R,IAAsB,KAExBA,IAAsBnS,EAAYJ,EAAQgC,YAAauC,IASrDvE,EAAQwS,mBAAqBD,GAAmB7R,QAClD+M,EAAsBnM,EAAStB,EAGjC,IAAIoD,KAAsBkP,GAAqBC,IAAoBzS,KAAK,KAAK2S,OACzEpC,GAAgBhQ,GAAU,IAAM+C,GAChCqB,GAAgBrE,EAAYgD,GAAoBkF,IAChDoK,GAAczS,GAAOC,IAAM4F,OAAOqI,KAAKlO,GAAOC,IAAIQ,OAAS,EAC3DiS,IAA6B3S,EAAQ4S,eAAiB,IAAIlS,OAAS,CAKvE,KAAKiS,KACID,KACAtP,GACP,MAAOgM,IAGT,IAAIzC,IAAUG,EACd,IAAI9M,EAAQ8M,QAAU,EAAG,CACvB,GAAI+F,IAAalM,WAAW3G,EAAQ8M,QACpCA,KACE7B,gBAAiB4H,GACjBzH,eAAgByH,GAChB7H,mBAAoB,EACpBG,kBAAmB,OAGrBwB,IAAWR,EAAUxH,EAAM0L,IAC3BvD,GAAUD,EAA8BlI,EAAMvB,GAAoBuJ,GAAUrB,GAGzEtL,GAAQiO,0BACXpM,EAASC,SAASR,EAAS8B,GAG7B,IAAI4D,GAEJ,IAAIhH,EAAQ8S,gBAAiB,CAC3B,GAAIA,KAAmB7L,EAAiBjH,EAAQ8S,gBAChDjO,GAAiBF,EAAMmO,IACvB5E,GAAgBhB,KAAK4F,IAGvB,GAAI9S,EAAQ4E,UAAY,EAAG,CACzBoC,GAAoBrC,EAAKS,MAAM6B,GAAiBvG,OAAS,CACzD,IAAIqS,IAAgBhM,EAA8B/G,EAAQ4E,SAAUoC,GAGpEnC,GAAiBF,EAAMoO,IACvB7E,GAAgBhB,KAAK6F,IAGvB,GAAI/S,EAAQ4S,cAAe,CACzB,GAAIA,KAAiB3N,EAAgBjF,EAAQ4S,cAC7C/N,GAAiBF,EAAMiO,IACvB1E,GAAgBhB,KAAK0F,IAGvB,GAAIjB,IAAY7E,GACV9M,EAAQgT,cAAgB,EACpBhT,EAAQgT,aACRvH,EAAUnE,MAAMqF,IACpB,EAEFsG,GAAwB,IAAdtB,EAQVsB,MAAYjT,EAAQkT,cACtBxO,EAAiBC,EAAMwE,GAGzB,IAAIyD,IAAUQ,EAAezI,EAAM0L,GAAe1D,IAC9C2D,GAAgB1D,GAAQW,QAC5BA,IAAW3G,KAAKC,IAAIyJ,GAAe,GACnC9C,GAAcZ,GAAQY,WAEtB,IAAI3J,MA6BJ,IA5BAA,GAAM0M,eAA0B3D,GAAQ5B,mBAAqB,EAC7DnH,GAAM2M,cAA0B5D,GAAQzB,kBAAoB,EAC5DtH,GAAMsP,iBAA0BtP,GAAM0M,gBAAgD,OAA9B3D,GAAQ1B,mBAChErH,GAAMuP,wBAA0BV,KACG7O,GAAM0M,iBAAmB1M,GAAMsP,kBAC3BtP,GAAM2M,gBAAkB3M,GAAM0M,gBACrE1M,GAAMwP,uBAA0BrT,EAAQ4E,UAAYf,GAAM2M,cAC1D3M,GAAMyP,qBAA0BxM,EAAkB9G,EAAQwF,SAAW3B,GAAMuP,yBAA2BvP,GAAM0M,gBAC5G1M,GAAM4M,oBAA0B3J,EAAkB9G,EAAQwF,QAAU3B,GAAM2M,cAC1E3M,GAAMuM,wBAA0BmC,GAAmB7R,OAAS,GAExDmD,GAAMuP,yBAA2BvP,GAAMwP,0BACzC7F,GAAcxN,EAAQ4E,SAAW+B,WAAW3G,EAAQ4E,UAAY4I,GAE5D3J,GAAMuP,0BACRvP,GAAM0M,gBAAiB,EACvB3D,GAAQ5B,mBAAqBwC,GAC7BxG,GAAoBrC,EAAKS,MAAM6B,EAAkB8B,IAAcrI,OAAS,EACxEwN,GAAgBhB,KAAKnG,EAA8ByG,GAAaxG,MAG9DnD,GAAMwP,yBACRxP,GAAM2M,eAAgB,EACtB5D,GAAQzB,kBAAoBqC,GAC5BU,GAAgBhB,KAAK7H,EAA4BmI,OAIjC,IAAhBA,KAAsB3J,GAAMuM,wBAC9B,MAAOhB,IAGT,IAAqB,MAAjBpP,EAAQwF,MAAe,CACzB,GAAIkL,GACyB,kBAAlB1Q,GAAQwF,QACjBkL,GAAa/J,WAAW3G,EAAQwF,OAEhC+H,GAAW3G,KAAKC,IAAI6J,GAAY,IAG9B7M,GAAMyP,sBACRpF,GAAgBhB,KAAK3H,EAAiBmL,KAGpC7M,GAAM4M,qBACRvC,GAAgBhB,KAAK3H,EAAiBmL,IAAY,IAkCtD,MA3BwB,OAApB1Q,EAAQ4E,UAAoBgI,GAAQ5B,mBAAqB,IAC3DnH,GAAMuM,wBAA0BvM,GAAMuM,yBAA2B6C,IAGnE/C,GAAe3C,GAAW3C,GAC1B+F,GAAkBnD,GAAc5C,GAC3B5K,EAAQkT,eACXrP,GAAMqL,gBAAkBtC,GAAQ5B,mBAAqB,EACrDnH,GAAMsL,uBAAyBvC,GAAQzB,kBAAoB,GAC5B2B,GAAQ1B,eAAiB,GACK,IAA9B0B,GAAQ3B,mBAGrCnL,EAAQG,OACNH,EAAQuR,eACV5J,EAAyByG,EAAezJ,EAAMmB,OAAOqI,KAAKnO,EAAQG,OAEpEqC,EAAyBlB,EAAStB,IAGhC6D,GAAMqL,iBAAmBrL,GAAMsL,uBACjCF,EAAczB,IACJxN,EAAQkT,cAClBxO,EAAiBC,GAAM,IAKvB2K,eAAe,EACfD,IAAK1B,EACL4B,MAAO,WACL,MAAIzB,GAAJ,QAEA+D,IACExC,IAAK1B,EACLiB,OAAQ7E,EACR+H,OAAQ,KACRC,MAAO,MAGThD,EAAS,GAAIlD,GAAgBgG,IAE7B7H,EAAeuF,GAMRR,UAgTbwE,IAA8B,sBAAuB,SAASC,GAShE,QAASC,GAAmB9O,GAC1B,MAAOA,GAAK2H,YAA2C,KAA7B3H,EAAK2H,WAAW9K,SAT5CgS,EAAoBE,QAAQxG,KAAK,qBAEjC,IAAIyG,GAA6B,kBAC7BC,EAA+B,YAE/BC,EAA2B,gBAC3BC,EAA0B,cAM9BnI,MAAKC,MAAQ,cAAe,aAAc,kBAAmB,eAAgB,WAAY,WAAY,YAChG,SAASmI,EAAeC,EAAcnI,EAAmBoI,EAAgBjI,EAAYnK,EAAYqS,GA0BpG,QAASC,GAAiB9T,GAExB,MAAOA,GAAQ+T,QAAQ,cAAe,IAGxC,QAASC,GAAgB1U,EAAGC,GAG1B,MAFIa,GAASd,KAAIA,EAAIA,EAAEgB,MAAM,MACzBF,EAASb,KAAIA,EAAIA,EAAEe,MAAM,MACtBhB,EAAE2U,OAAO,SAASrT,GACvB,MAA0B,KAAnBrB,EAAEuB,QAAQF,KAChBnB,KAAK,KAGV,QAASyU,GAAyBlU,EAASmU,EAAWC,GAiEpD,QAASC,GAAsBC,GAC7B,GAAI1U,MAEA2U,EAAS1Q,EAAWyQ,GAAQE,uBAgBhC,OAZAjU,IAAS,QAAQ,SAAS,MAAM,QAAS,SAASmD,GAChD,GAAID,GAAQ8Q,EAAO7Q,EACnB,QAAQA,GACN,IAAK,MACHD,GAASgR,EAASC,SAClB,MACF,KAAK,OACHjR,GAASgR,EAASE,WAGtB/U,EAAO8D,GAAO6C,KAAKgL,MAAM9N,GAAS,OAE7B7D,EAGT,QAASgV,KACP,GAAIC,GAAWnB,EAAYoB,GACzBrT,SAAU+R,EACVrO,OAAO,EACPrF,KAAMuU,EAAsBF,IAK9B,OAAOU,GAAS5F,cAAgB4F,EAAW,KAG7C,QAASE,GAAY9T,GACnB,MAAOA,GAAQ6B,KAAK,UAAY,GAGlC,QAASkS,KACP,GAAIC,GAAgBnB,EAAiBiB,EAAYX,IAC7CzR,EAAQqR,EAAgBiB,EAAeC,GACvCtS,EAAWoR,EAAgBkB,EAAiBD,GAE5CJ,EAAWnB,EAAYoB,GACzBjV,GAAIwU,EAAsBD,GAC1B3S,SAAUgS,EAA0B,IAAM9Q,EAC1ChB,YAAa6R,EAA2B,IAAM5Q,EAC9CuC,OAAO,GAKT,OAAO0P,GAAS5F,cAAgB4F,EAAW,KAG7C,QAAS7F,KACP8F,EAAMK,SACNhB,EAAUxS,YAAY2R,GACtBc,EAASzS,YAAY2R,GA1HvB,GAAIwB,GAAQ5T,EAAO2C,EAAWsQ,GAAWiB,WAAU,IAC/CF,EAAkBpB,EAAiBiB,EAAYD,GAEnDX,GAAU1S,SAAS6R,GACnBc,EAAS3S,SAAS6R,GAElBwB,EAAMrT,SAAS8R,GAEf8B,EAAgBC,OAAOR,EAEvB,IAAIS,GAAYC,EAAcZ,GAM9B,KAAKY,IACHD,EAAaP,KACRO,GACH,MAAOvG,IAIX,IAAIyG,GAAmBD,GAAeD,CAEtC,QACErG,MAAO,WA8BL,QAAS5B,KACHoI,GACFA,EAAiB1G,MA/BrB,GAAIN,GAEAgH,EAAmBD,EAAiBvG,OAyBxC,OAxBAwG,GAAiBC,KAAK,WAEpB,MADAD,GAAmB,MACdH,IACHA,EAAaP,MAEXU,EAAmBH,EAAWrG,QAC9BwG,EAAiBC,KAAK,WACpBD,EAAmB,KACnB1G,IACAN,EAAOC,aAEF+G,IAIX1G,QACAN,GAAOC,cAGTD,EAAS,GAAIlD,IACXwD,IAAK1B,EACLiB,OAAQjB,MA2EhB,QAASsI,GAA6B9V,EAAMD,EAAIG,EAAS6V,GACvD,GAAIC,GAAgBC,EAAwBjW,EAAMkC,GAC9CgU,EAAcD,EAAwBlW,EAAImC,GAE1CiU,IAWJ,OAVA1V,GAAQsV,EAAS,SAASvB,GACxB,GAAI4B,GAAa5B,EAAY,IACzB6B,EAAY7B,EAAO,MACnBO,EAAWX,EAAyBlU,EAASkW,EAAYC,EACzDtB,IACFoB,EAAiBpJ,KAAKgI,KAKrBiB,GAAkBE,GAA2C,IAA5BC,EAAiB5V,QAGrD6O,MAAO,WA0BL,QAAS5B,KACP/M,EAAQ6V,EAAkB,SAAS1H,GACjCA,EAAOM,QA3BX,GAAIoH,KAEAN,IACFM,EAAiBvJ,KAAKiJ,EAAc5G,SAGlC8G,GACFI,EAAiBvJ,KAAKmJ,EAAY9G,SAGpC3O,EAAQ0V,EAAkB,SAASI,GACjCD,EAAiBvJ,KAAKwJ,EAAUnH,UAGlC,IAAIR,GAAS,GAAIlD,IACfwD,IAAK1B,EACLiB,OAAQjB,GAOV,OAJA9B,GAAgB8K,IAAIF,EAAkB,SAASG,GAC7C7H,EAAOC,SAAS4H,KAGX7H,IA3BX,OAsCF,QAASqH,GAAwBS,GAC/B,GAAIvV,GAAUuV,EAAiBvV,QAC3BtB,EAAU6W,EAAiB7W,WAE3B6W,GAAiBxE,aACnBrS,EAAQoE,MAAQyS,EAAiBzS,MACjCpE,EAAQqS,YAAa,EACrBrS,EAAQwS,mBAAoB,EAKG,UAA3BqE,EAAiBzS,QACnBpE,EAAQuO,OAASvO,EAAQoC,eAOzBpC,EAAQoD,qBACVpD,EAAQoE,MAAQf,EAAgBrD,EAAQoE,MAAOpE,EAAQoD,oBAGzD,IAAI8R,GAAWnB,EAAYzS,EAAStB,EAMpC,OAAOkV,GAAS5F,cAAgB4F,EAAW,KAtP7C,IAAKlJ,EAASiG,aAAejG,EAASkG,YAAa,MAAO7P,EAE1D,IAAIyS,GAAWZ,EAAU,GAAG4C,KACxBC,EAAW7S,EAAW+P,GAEtByB,EAAkBnU,EAIpBkS,EAAmBsD,IAAajC,EAASkC,SAASD,GAAYA,EAAWjC,EAG/C7S,GAA6BJ,EAEzD,OAAO,UAAsBgV,GAC3B,MAAOA,GAAiB1W,MAAQ0W,EAAiB3W,GAC3C+V,EAA6BY,EAAiB1W,KACjB0W,EAAiB3W,GACjB2W,EAAiBxW,QACjBwW,EAAiBX,SAC9CE,EAAwBS,QA2OhCI,IAAuB,mBAAoB,SAASzL,GACtDG,KAAKC,MAAQ,YAAa,kBAAmB,WACxC,SAASsL,EAAarL,EAAmBhK,GAqQ5C,QAASsV,GAAiB9W,GACxBA,EAAUR,EAAQQ,GAAWA,EAAUA,EAAQM,MAAM,IAErD,KAAK,GADDyW,MAAcC,KACTvW,EAAE,EAAGA,EAAIT,EAAQK,OAAQI,IAAK,CACrC,GAAID,GAAQR,EAAQS,GAChBwW,EAAmB9L,EAAiB+L,uBAAuB1W,EAC3DyW,KAAqBD,EAAQxW,KAC/BuW,EAAQlK,KAAKgK,EAAUzP,IAAI6P,IAC3BD,EAAQxW,IAAS,GAGrB,MAAOuW,GA9QT,GAAI3J,GAAwBxL,EAA6BJ,EAEzD,OAAO,UAASP,EAAS8C,EAAO/D,EAASL,GAkDvC,QAASwX,KACPxX,EAAQoC,eACRqL,EAAsBnM,EAAStB,GAGjC,QAAS4N,KACPE,GAAkB,EAClB0J,IACAjV,EAAqBjB,EAAStB,GAyEhC,QAASyX,GAAmBxN,EAAI3I,EAAS8C,EAAOpE,EAASuO,GACvD,GAAImJ,EACJ,QAAQtT,GACN,IAAK,UACHsT,GAAQpW,EAAStB,EAAQG,KAAMH,EAAQE,GAAIqO,EAC3C,MAEF,KAAK,WACHmJ,GAAQpW,EAASqW,EAAcC,EAAiBrJ,EAChD,MAEF,KAAK,WACHmJ,GAAQpW,EAASqW,EAAcpJ,EAC/B,MAEF,KAAK,cACHmJ,GAAQpW,EAASsW,EAAiBrJ,EAClC,MAEF,SACEmJ,GAAQpW,EAASiN,GAIrBmJ,EAAKxK,KAAKlN,EAEV,IAAI8D,GAAQmG,EAAG4N,MAAM5N,EAAIyN,EACzB,IAAI5T,EAKF,GAJIsE,EAAWtE,EAAMyL,SACnBzL,EAAQA,EAAMyL,SAGZzL,YAAiB+H,GACnB/H,EAAMkS,KAAKzH,OACN,IAAInG,EAAWtE,GAEpB,MAAOA,EAIX,OAAOzB,GAGT,QAASyV,GAAuBxW,EAAS8C,EAAOpE,EAASiS,EAAY8F,GACnE,GAAIC,KAqCJ,OApCApX,GAAQqR,EAAY,SAASgG,GAC3B,GAAIvB,GAAYuB,EAAIF,EACfrB,IAGLsB,EAAW9K,KAAK,WACd,GAAI6B,GACAmJ,EAEAC,GAAW,EACXC,EAAsB,SAASvK,GAC5BsK,IACHA,GAAW,GACVD,GAAiB7V,GAAMwL,GACxBkB,EAAOC,UAAUnB,IAkBrB,OAdAkB,GAAS,GAAIlD,IACXwD,IAAK,WACH+I,KAEFxJ,OAAQ,WACNwJ,GAAoB,MAIxBF,EAAgBT,EAAmBf,EAAWpV,EAAS8C,EAAOpE,EAAS,SAASqY,GAC9E,GAAIC,GAAYD,KAAW,CAC3BD,GAAoBE,KAGfvJ,MAIJiJ,EAGT,QAASO,GAAkBjX,EAAS8C,EAAOpE,EAASiS,EAAY8F,GAC9D,GAAIC,GAAaF,EAAuBxW,EAAS8C,EAAOpE,EAASiS,EAAY8F,EAC7E,IAA0B,IAAtBC,EAAWtX,OAAc,CAC3B,GAAIf,GAAEC,CACS,oBAAXmY,GACFpY,EAAImY,EAAuBxW,EAAS,cAAetB,EAASiS,EAAY,qBACxErS,EAAIkY,EAAuBxW,EAAS,WAAYtB,EAASiS,EAAY,mBACjD,aAAX8F,IACTpY,EAAImY,EAAuBxW,EAAS,cAAetB,EAASiS,EAAY,eACxErS,EAAIkY,EAAuBxW,EAAS,WAAYtB,EAASiS,EAAY,aAGnEtS,IACFqY,EAAaA,EAAWrO,OAAOhK,IAE7BC,IACFoY,EAAaA,EAAWrO,OAAO/J,IAInC,GAA0B,IAAtBoY,EAAWtX,OAGf,MAAO,UAAwBsM,GAC7B,GAAIwL,KASJ,OARIR,GAAWtX,QACbE,EAAQoX,EAAY,SAASS,GAC3BD,EAAQtL,KAAKuL,OAIjBD,EAAQ9X,OAASmL,EAAgB8K,IAAI6B,EAASxL,GAAYA,IAEnD,SAAe0L,GACpB9X,EAAQ4X,EAAS,SAASzJ,GACxB2J,EAAS3J,EAAOH,SAAWG,EAAOM,UAzP1C,GAAIvB,IAAkB,CAKG,KAArB6K,UAAUjY,QAAgBwH,EAAS7H,KACrCL,EAAUK,EACVA,EAAU,MAGZL,EAAUkC,EAAwBlC,GAC7BK,IACHA,EAAUiB,EAAQ6B,KAAK,UAAY,GAC/BnD,EAAQ8B,WACVzB,GAAW,IAAML,EAAQ8B,UAEvB9B,EAAQgC,cACV3B,GAAW,IAAML,EAAQgC,aAI7B,IAQI4W,GAAQC,EARRlB,EAAe3X,EAAQ8B,SACvB8V,EAAkB5X,EAAQgC,YAM1BiQ,EAAakF,EAAiB9W,EAElC,IAAI4R,EAAWvR,OAAQ,CACrB,GAAIoY,GAASC,CACA,UAAT3U,GACF2U,EAAW,QACXD,EAAU,eAEVC,EAAW,SAAW3U,EAAMiC,OAAO,GAAG2S,cAAgB5U,EAAM6U,OAAO,GACnEH,EAAU1U,GAGE,UAAVA,GAA+B,SAAVA,IACvBwU,EAASL,EAAkBjX,EAAS8C,EAAOpE,EAASiS,EAAY8G,IAElEF,EAASN,EAAkBjX,EAAS8C,EAAOpE,EAASiS,EAAY6G,GAIlE,GAAKF,GAAWC,EAAhB,CAaA,GAAI9J,EAEJ,QACEO,eAAe,EACfD,IAAK,WAQH,MAPIN,GACFA,EAAOM,OAEPzB,IACAmB,EAAS,GAAIlD,GACbkD,EAAOC,UAAS,IAEXD,GAETQ,MAAO,WA0CL,QAAS2J,GAAWC,GAClBvL,EAAMuL,GACNpK,EAAOC,SAASmK,GAGlB,QAASC,GAAcd,GAChBxK,KACFuL,GAAyBhX,GAAMiW,GAChCY,EAAWZ,IAjDf,GAAIvJ,EACF,MAAOA,EAGTA,GAAS,GAAIlD,EACb,IAAIwN,GACAC,IAiCJ,OA/BIV,IACFU,EAAMpM,KAAK,SAASjD,GAClBoP,EAAwBT,EAAO3O,KAI/BqP,EAAM5Y,OACR4Y,EAAMpM,KAAK,SAASjD,GAClBuN,IACAvN,GAAG,KAGLuN,IAGEqB,GACFS,EAAMpM,KAAK,SAASjD,GAClBoP,EAAwBR,EAAM5O,KAIlC8E,EAAOwK,SACLlK,IAAK,WACH+J,KAEFxK,OAAQ,WACNwK,GAAc,MAIlBvN,EAAgByN,MAAMA,EAAOJ,GACtBnK,UA8JbyK,IAA6B,sBAAuB,SAAShG,GAC/DA,EAAoBE,QAAQxG,KAAK,qBACjCvB,KAAKC,MAAQ,cAAe,kBAAmB,SAAS6N,EAAa5N,GA+CnE,QAAS6N,GAAiB7C,GAExB,GAAIvV,GAAUuV,EAAiBvV,QAC3B8C,EAAQyS,EAAiBzS,MACzBpE,EAAU6W,EAAiB7W,QAC3BK,EAAUwW,EAAiBxW,OAC/B,OAAOoZ,GAAYnY,EAAS8C,EAAO/D,EAASL,GApD9C,MAAO,UAAsB6W,GAC3B,GAAIA,EAAiB1W,MAAQ0W,EAAiB3W,GAAI,CAChD,GAAIiW,GAAgBuD,EAAiB7C,EAAiB1W,MAClDkW,EAAcqD,EAAiB7C,EAAiB3W,GACpD,KAAKiW,IAAkBE,EAAa,MAEpC,QACE9G,MAAO,WAoBL,QAASoK,KACP,MAAO,YACL/Y,EAAQ6V,EAAkB,SAAS1H,GAEjCA,EAAOM,SAKb,QAAS2G,GAAKY,GACZ7H,EAAOC,SAAS4H,GA7BlB,GAAIH,KAEAN,IACFM,EAAiBvJ,KAAKiJ,EAAc5G,SAGlC8G,GACFI,EAAiBvJ,KAAKmJ,EAAY9G,SAGpC1D,EAAgB8K,IAAIF,EAAkBT,EAEtC,IAAIjH,GAAS,GAAIlD,IACfwD,IAAKsK,IACL/K,OAAQ+K,KAGV,OAAO5K,KAiBX,MAAO2K,GAAiB7C,QAe5B+C,GAAuB,kBACvBC,GAAsB,gBACtBC,IAA0B,mBAAoB,SAAStO,GAWzD,QAASuO,GAAsBC,GAC7B,IAAKA,EACH,MAAO,KAGT,IAAI7L,GAAO6L,EAAYrZ,MAAMsZ,GACzBC,EAAMpU,OAAOC,OAAO,KAKxB,OAHAnF,GAAQuN,EAAM,SAASpK,GACrBmW,EAAInW,IAAO,IAENmW,EAGT,QAASC,GAAmBC,EAAgBC,GAC1C,GAAID,GAAkBC,EAAoB,CACxC,GAAIC,GAAkBP,EAAsBM,EAC5C,OAAOD,GAAezZ,MAAMsZ,GAAWM,KAAK,SAAS/Z,GACnD,MAAO8Z,GAAgB9Z,MAK7B,QAASga,GAAUC,EAAUnZ,EAASyU,EAAkB2E,GACtD,MAAOC,GAAMF,GAAUF,KAAK,SAAStQ,GACnC,MAAOA,GAAG3I,EAASyU,EAAkB2E,KAIzC,QAASE,GAAoBlE,EAAWmE,GACtC,GAAIlb,IAAK+W,EAAU5U,UAAY,IAAIpB,OAAS,EACxCd,GAAK8W,EAAU1U,aAAe,IAAItB,OAAS,CAC/C,OAAOma,GAAMlb,GAAKC,EAAID,GAAKC,EA1C7B,GAAIkb,GAAmB,EACnBC,EAAgB,EAChBd,EAAY,IAEZU,EAAQhP,KAAKgP,OACfK,QACApM,UACA9O,QAsCF6a,GAAM7a,KAAKoN,KAAK,SAAS5L,EAASuB,EAAckT,GAE9C,OAAQlT,EAAawP,YAAcuI,EAAoB/X,KAGzD8X,EAAMK,KAAK9N,KAAK,SAAS5L,EAASuB,EAAckT,GAG9C,OAAQlT,EAAawP,aAAeuI,EAAoB/X,KAG1D8X,EAAMK,KAAK9N,KAAK,SAAS5L,EAASuB,EAAckT,GAG9C,MAAiC,SAA1BA,EAAiB3R,OAAoBvB,EAAawP,aAG3DsI,EAAMK,KAAK9N,KAAK,SAAS5L,EAASuB,EAAckT,GAE9C,MAAOA,GAAiB1D,YAAc0D,EAAiBkF,QAAUF,IAAkBlY,EAAawP,aAGlGsI,EAAM/L,OAAO1B,KAAK,SAAS5L,EAASuB,EAAckT,GAEhD,MAAOA,GAAiB1D,YAAcxP,EAAawP,aAGrDsI,EAAM/L,OAAO1B,KAAK,SAAS5L,EAASuB,EAAckT,GAGhD,MAAOA,GAAiBkF,QAAUF,GAAiBlY,EAAawP,aAGlEsI,EAAM/L,OAAO1B,KAAK,SAAS5L,EAASuB,EAAckT,GAChD,GAAImF,GAAKrY,EAAaf,SAClBqZ,EAAKtY,EAAab,YAClBoZ,EAAKrF,EAAiBjU,SACtBuZ,EAAKtF,EAAiB/T,WAG1B,OAAKmG,GAAY+S,IAAO/S,EAAYgT,IAAShT,EAAYiT,IAAOjT,EAAYkT,IACnE,EAGFlB,EAAmBe,EAAIG,IAAOlB,EAAmBgB,EAAIC,KAG9DzP,KAAKC,MAAQ,QAAS,aAAc,eAAgB,YAAa,YACpD,cAAe,kBAAmB,mBAAoB,WAAY,gBAC1E,SAASrC,EAASyK,EAAcC,EAAgBC,EAAaoH,EACpDC,EAAe1P,EAAmB2P,EAAoB3Z,EAAYkK,GAM9E,QAAS0P,KACP,GAAIC,IAAmB,CACvB,OAAO,UAASzR,GAKVyR,EACFzR,IAEA+J,EAAW2H,aAAa,WACtBD,GAAmB,EACnBzR,OAgDR,QAAS2R,GAA0Bta,EAASoV,GAC1C,MAAO/T,GAAsBrB,EAASoV,MAUxC,QAASmF,GAAcC,EAAQxa,EAAS8C,GACtC,GAAI2X,GAAa7X,EAAW5C,GACxB0a,EAAmB9X,EAAW4X,GAE9B1E,KACA6E,EAAUC,EAAiB9X,EAW/B,OAVI6X,IACFrb,EAAQqb,EAAS,SAAS1U,GACpByP,EAASmF,KAAK5U,EAAM5C,KAAMoX,GAC5B3E,EAAQlK,KAAK3F,EAAMyF,UACA,UAAV5I,GAAqB4S,EAASmF,KAAK5U,EAAM5C,KAAMqX,IACxD5E,EAAQlK,KAAK3F,EAAMyF,YAKlBoK,EA8ET,QAASgF,GAAe9a,EAAS8C,EAAOsJ,GAqPtC,QAAS2O,GAAetN,EAAQ3K,EAAOkY,EAAO9R,GAC5C+R,EAAyB,WACvB,GAAIC,GAAYX,EAAcC,EAAQxa,EAAS8C,EAC3CoY,GAAU9b,QAKZ6I,EAAM,WACJ3I,EAAQ4b,EAAW,SAASxP,GAC1BA,EAAS1L,EAASgb,EAAO9R,SAKjCuE,EAAO0N,SAASrY,EAAOkY,EAAO9R,GAGhC,QAASoD,GAAM8K,GACblU,EAAsBlD,EAAStB,GAC/ByN,EAAsBnM,EAAStB,GAC/BuC,EAAqBjB,EAAStB,GAC9BA,EAAQoC,eACR2M,EAAOC,UAAU0J,GAxQnB,GAEI/T,GAAMmX,EAFN9b,EAAUiI,EAAKyF,EAGnBpM,GAAUD,EAAyBC,GAC/BA,IACFqD,EAAOT,EAAW5C,GAClBwa,EAASxa,EAAQwa,UAGnB9b,EAAUkC,EAAwBlC,EAIlC,IAAI+O,GAAS,GAAIlD,GAGb0Q,EAA2Bd,GA6B/B,IA3BI5b,EAAQG,EAAQ8B,YAClB9B,EAAQ8B,SAAW9B,EAAQ8B,SAAShC,KAAK,MAGvCE,EAAQ8B,WAAarB,EAAST,EAAQ8B,YACxC9B,EAAQ8B,SAAW,MAGjBjC,EAAQG,EAAQgC,eAClBhC,EAAQgC,YAAchC,EAAQgC,YAAYlC,KAAK,MAG7CE,EAAQgC,cAAgBvB,EAAST,EAAQgC,eAC3ChC,EAAQgC,YAAc,MAGpBhC,EAAQG,OAAS+H,EAASlI,EAAQG,QACpCH,EAAQG,KAAO,MAGbH,EAAQE,KAAOgI,EAASlI,EAAQE,MAClCF,EAAQE,GAAK,OAMVyE,EAEH,MADAiJ,KACOmB,CAGT,IAAIvO,IAAamE,EAAKnE,UAAWR,EAAQ8B,SAAU9B,EAAQgC,aAAalC,KAAK,IAC7E,KAAK4c,EAAsBlc,GAEzB,MADAoN,KACOmB,CAGT,IAAIqD,IAAgB,QAAS,OAAQ,SAASjR,QAAQiD,IAAU,EAO5DuY,GAAkBC,GAAqB1I,EAAU,GAAG2I,QAAUC,EAAuBrV,IAAI9C,GACzFoY,GAAsBJ,GAAkBK,EAAuBvV,IAAI9C,OACnEsY,IAAyBF,EAAkB9B,KAQ/C,IAJK0B,GAAoBM,GAAwBF,EAAkB9B,OAASH,IAC1E6B,GAAkBO,EAAqB5b,EAASwa,EAAQ1X,IAGtDuY,EAEF,MADA/O,KACOmB,CAGLqD,IACF+K,EAAqB7b,EAGvB,IAAIuB,IACFwP,WAAYD,EACZ9Q,QAASA,EACT8C,MAAOA,EACPtC,SAAU9B,EAAQ8B,SAClBE,YAAahC,EAAQgC,YACrB4L,MAAOA,EACP5N,QAASA,EACT+O,OAAQA,EAGV,IAAIkO,EAAsB,CACxB,GAAIG,GAAoB5C,EAAU,OAAQlZ,EAASuB,EAAcka,EACjE,IAAIK,EACF,MAAIL,GAAkB9B,QAAUF,GAC9BnN,IACOmB,IAEPpM,EAAsBrB,EAASyb,EAAmBla,GAC3Cka,EAAkBhO,OAG7B,IAAIsO,GAAsB7C,EAAU,SAAUlZ,EAASuB,EAAcka,EACrE,IAAIM,EACF,GAAIN,EAAkB9B,QAAUF,EAI9BgC,EAAkBhO,OAAOM,UACpB,CAAA,IAAI0N,EAAkB1K,WAS3B,MAFA1P,GAAsBrB,EAASyb,EAAmBla,GAE3Cka,EAAkBhO,MALzBgO,GAAkBnP,YAOf,CAIL,GAAI0P,GAAoB9C,EAAU,OAAQlZ,EAASuB,EAAcka,EACjE,IAAIO,EAAmB,CACrB,GAAIP,EAAkB9B,QAAUF,EAU9B,MAPA5W,GAAiC7C,EAAS8Q,EAAehO,EAAQ,KAAMpE,GAEvEoE,EAAQvB,EAAauB,MAAQ2Y,EAAkB3Y,MAC/CpE,EAAU2C,EAAsBrB,EAASyb,EAAmBla,GAIrDka,EAAkBhO,MATzB6M,GAA0Bta,EAASuB,SAgBzC+Y,GAA0Bta,EAASuB,EAMrC,IAAI0a,GAAmB1a,EAAawP,UAOpC,IANKkL,IAEHA,EAA2C,YAAvB1a,EAAauB,OAAuB0B,OAAOqI,KAAKtL,EAAa7C,QAAQE,QAAUQ,OAAS,GACrFka,EAAoB/X,KAGxC0a,EAGH,MAFA3P,KACA4P,EAA2Blc,GACpByN,CAIT,IAAI0O,IAAWV,EAAkBU,SAAW,GAAK,CA0EjD,OAzEA5a,GAAa4a,QAAUA,EAEvBC,EAA0Bpc,EAASwZ,EAAkBjY,GAErDmR,EAAW2H,aAAa,WACtB,GAAI9E,GAAmBmG,EAAuBvV,IAAI9C,GAC9CgZ,GAAsB9G,CAC1BA,GAAmBA,KAKnB,IAAI+G,GAAgBtc,EAAQwa,aAIxByB,EAAmBK,EAAcld,OAAS,IACS,YAA3BmW,EAAiBzS,OACdyS,EAAiBxE,YACjBuI,EAAoB/D,GAInD,IAAI8G,GAAsB9G,EAAiB4G,UAAYA,IAAYF,EAuBjE,MAnBII,KACFlQ,EAAsBnM,EAAStB,GAC/BuC,EAAqBjB,EAAStB,KAK5B2d,GAAuBvL,GAAgByE,EAAiBzS,QAAUA,KACpEpE,EAAQoC,eACR2M,EAAOM,YAMJkO,GACHC,EAA2Blc,GAQ/B8C,IAASyS,EAAiBxE,YAAcuI,EAAoB/D,GAAkB,GACxE,WACAA,EAAiBzS,MAEvBsZ,EAA0Bpc,EAASyZ,EACnC,IAAI8C,GAAatC,EAAYja,EAAS8C,EAAOyS,EAAiB7W,QAE9D6d,GAAW7H,KAAK,SAASY,GACvBhJ,GAAOgJ,EACP,IAAIC,GAAmBmG,EAAuBvV,IAAI9C,EAC9CkS,IAAoBA,EAAiB4G,UAAYA,GACnDD,EAA2BtZ,EAAW5C,IAExC+a,EAAetN,EAAQ3K,EAAO,cAKhC2K,EAAOwK,QAAQsE,GACfxB,EAAetN,EAAQ3K,EAAO,cAGzB2K,EA6BT,QAASoO,GAAqB7b,GAC5B,GAAIqD,GAAOT,EAAW5C,GAClBwc,EAAWnZ,EAAKoZ,iBAAiB,IAAMnE,GAAuB,IAClEhZ,GAAQkd,EAAU,SAASE,GACzB,GAAI/C,GAAQgD,SAASD,EAAMvR,aAAamN,KACpC/C,EAAmBmG,EAAuBvV,IAAIuW,EAClD,IAAInH,EACF,OAAQoE,GACN,IAAKF,GACHlE,EAAiB9H,OAAOM,KAE1B,KAAKyL,GACHkC,EAAuBxH,OAAOwI,MAOxC,QAASR,GAA2Blc,GAClC,GAAIqD,GAAOT,EAAW5C,EACtBqD,GAAKuZ,gBAAgBtE,IACrBoD,EAAuBxH,OAAO7Q,GAGhC,QAASwZ,GAAkBC,EAAYC,GACrC,MAAOna,GAAWka,KAAgBla,EAAWma,GAU/C,QAASnB,GAAqB5b,EAASsc,EAAexZ,GACpD,GAIIka,GAJAC,EAAchd,EAAO2S,EAAU,GAAG4C,MAClC0H,EAAsBL,EAAkB7c,EAASid,IAAwC,SAAxBjd,EAAQ,GAAGmd,SAC5EC,EAAsBP,EAAkB7c,EAAS2S,GACjD0K,GAA0B,EAE1BC,EAAkB9B,EAAuBrV,IAAIvD,EAAW5C,IAExDud,EAAavd,EAAQkJ,KAAKqP,GAK9B,KAJIgF,IACFjB,EAAgBiB,GAGXjB,GAAiBA,EAAcld,QAAQ,CACvCge,IAGHA,EAAsBP,EAAkBP,EAAe3J,GAGzD,IAAI3H,GAAasR,EAAc,EAC/B,IAAItR,EAAW9K,WAAaC,EAE1B,KAGF,IAAIqd,GAAU9B,EAAuBvV,IAAI6E,MAIzC,KAAKqS,EAAyB,CAC5B,GAAII,GAAwBjC,EAAuBrV,IAAI6E,EAEvD,IAAIyS,KAA0B,GAAQH,KAAoB,EAAO,CAG/DA,GAAkB,CAElB,OACSG,KAA0B,IACnCH,GAAkB,GAEpBD,EAA0BG,EAAQzM,WAGpC,GAAIlK,EAAYmW,IAAoBA,KAAoB,EAAM,CAC5D,GAAIxa,GAAQ8Z,EAAcpT,KAAK/B,GAC3BZ,GAAU/D,KACZwa,EAAkBxa,GAKtB,GAAI6a,GAA2BL,KAAoB,EAAO,KAQ1D,IANKE,IAGHA,EAAsBL,EAAkBP,EAAeW,IAGrDC,GAAuBE,EAGzB,KAaFd,GAVKc,KAEHG,EAAajB,EAAcpT,KAAKqP,KAQlB+D,EAAc9B,SALV+C,EAQtB,GAAIG,KAAmBL,GAA2BL,IAAoBM,KAAoB,CAC1F,OAAOI,IAAkBN,GAAuBF,EAGlD,QAASd,GAA0Bpc,EAAS2Z,EAAO6D,GACjDA,EAAUA,MACVA,EAAQ7D,MAAQA,CAEhB,IAAItW,GAAOT,EAAW5C,EACtBqD,GAAKsa,aAAarF,GAAsBqB,EAExC,IAAIiE,GAAWlC,EAAuBvV,IAAI9C,GACtCwa,EAAWD,EACT3b,EAAO2b,EAAUJ,GACjBA,CACN9B,GAAuBtV,IAAI/C,EAAMwa,GA5jBnC,GAAInC,GAAyB,GAAI1B,GAC7BwB,EAAyB,GAAIxB,GAC7BsB,EAAoB,KAwBpBwC,EAAkBpL,EAAWqL,OAC/B,WAAa,MAAiD,KAA1C7D,EAAiB8D,sBACrC,SAASC,GACFA,IACLH,IASApL,EAAW2H,aAAa,WACtB3H,EAAW2H,aAAa,WAGI,OAAtBiB,IACFA,GAAoB,UAO1BV,KAIAsD,EAAkBhU,EAAiBgU,kBACnC9C,EAAyB8C,EAEjB,SAAShf,GACT,MAAOgf,GAAgBC,KAAKjf,IAF5B,WAAa,OAAO,GAK5BiN,EAAwBxL,EAA6BJ,GAOrDmV,EAAW0I,KAAKC,UAAU3I,UAAY,SAAS1X,GAEjD,MAAOqM,QAASrM,MAA8C,GAApCqM,KAAKiU,wBAAwBtgB,IAuBzD,QACEgS,GAAI,SAASlN,EAAOyb,EAAW7S,GAC7B,GAAIrI,GAAOjD,EAAmBme,EAC9B3D,GAAiB9X,GAAS8X,EAAiB9X,OAC3C8X,EAAiB9X,GAAO8I,MACtBvI,KAAMA,EACNqI,SAAUA,KAIdyB,IAAK,SAASrK,EAAOyb,EAAW7S,GAQ9B,QAAS8S,GAAmBC,EAAMC,EAAgBC,GAChD,GAAIC,GAAgBxe,EAAmBse,EACvC,OAAOD,GAAKzL,OAAO,SAAS/M,GAC1B,GAAI4Y,GAAU5Y,EAAM5C,OAASub,KACXD,GAAiB1Y,EAAMyF,WAAaiT,EACtD,QAAQE,IAZZ,GAAIlE,GAAUC,EAAiB9X,EAC1B6X,KAELC,EAAiB9X,GAA8B,IAArBuU,UAAUjY,OAC9B,KACAof,EAAmB7D,EAAS4D,EAAW7S,KAY/CoT,IAAK,SAAS9e,EAASsc,GACrBve,EAAUgJ,EAAU/G,GAAU,UAAW,kBACzCjC,EAAUgJ,EAAUuV,GAAgB,gBAAiB,kBACrDtc,EAAQkJ,KAAKqP,GAAqB+D,IAGpC1Q,KAAM,SAAS5L,EAAS8C,EAAOpE,EAASoC,GAGtC,MAFApC,GAAUA,MACVA,EAAQoC,aAAeA,EAChBga,EAAe9a,EAAS8C,EAAOpE,IAQxCgS,QAAS,SAAS1Q,EAAS+e,GACzB,GAAIC,GAAW3H,UAAUjY,MAEzB,IAAiB,IAAb4f,EAEFD,IAASzD,MACJ,CACL,GAAI2D,GAAalY,EAAU/G,EAE3B,IAAKif,EAGE,CACL,GAAI5b,GAAOT,EAAW5C,GAClBkf,EAAe1D,EAAuBrV,IAAI9C,EAE7B,KAAb2b,EAEFD,GAAQG,EAGR1D,EAAuBpV,IAAI/C,GAAO0b,OAVpCA,GAAOzD,IAAsBtb,EAejC,MAAO+e,SA4ZXI,IAAuB,mBAAoB,SAASjV,GAOtD,QAASkV,GAAUpf,EAASyN,GAC1BzN,EAAQkJ,KAAKmW,EAAoB5R,GAGnC,QAAS6R,GAAatf,GACpBA,EAAQwN,WAAW6R,GAGrB,QAASE,GAAUvf,GACjB,MAAOA,GAAQkJ,KAAKmW,GAftB,GAAIG,GAAsB,iBAEtBpN,EAAU/H,KAAK+H,WAEfiN,EAAqB,mBAczBhV,MAAKC,MAAQ,WAAY,aAAc,YAAa,kBAAmB,YAAa,iBAC/E,SAAS/J,EAAYmS,EAAckD,EAAarL,EAAmByP,EAAarP,GAKnF,QAAS8U,GAAe9O,GAqBtB,QAAS+O,GAAYzZ,GACnB,GAAIA,EAAM0Z,UAAW,MAAO1Z,EAC5BA,GAAM0Z,WAAY,CAElB,IAAIC,GAAc3Z,EAAM4Z,QACpB7U,EAAa4U,EAAY5U,UAC7B8U,GAAO1Z,IAAIwZ,EAAa3Z,EAGxB,KADA,GAAI8Z,GACG/U,GAAY,CAEjB,GADA+U,EAAcD,EAAO3Z,IAAI6E,GACR,CACV+U,EAAYJ,YACfI,EAAcL,EAAYK,GAE5B,OAEF/U,EAAaA,EAAWA,WAI1B,OADC+U,GAAeC,GAAMxD,SAAS5Q,KAAK3F,GAC7BA,EAGT,QAASga,GAAQD,GACf,GAEIxgB,GAFAuX,KACA3O,IAGJ,KAAK5I,EAAI,EAAGA,EAAIwgB,EAAKxD,SAASpd,OAAQI,IACpC4I,EAAMwD,KAAKoU,EAAKxD,SAAShd,GAG3B,IAAI0gB,GAAwB9X,EAAMhJ,OAC9B+gB,EAAmB,EACnBC,IAEJ,KAAK5gB,EAAI,EAAGA,EAAI4I,EAAMhJ,OAAQI,IAAK,CACjC,GAAIyG,GAAQmC,EAAM5I,EACW,IAAzB0gB,IACFA,EAAwBC,EACxBA,EAAmB,EACnBpJ,EAAOnL,KAAKwU,GACZA,MAEFA,EAAIxU,KAAK3F,EAAM0C,IACf1C,EAAMuW,SAASld,QAAQ,SAAS+gB,GAC9BF,IACA/X,EAAMwD,KAAKyU,KAEbH,IAOF,MAJIE,GAAIhhB,QACN2X,EAAOnL,KAAKwU,GAGPrJ,EA7ET,GACIvX,GADAwgB,GAASxD,aACNsD,EAAS,GAAI9F,EAIpB,KAAKxa,EAAI,EAAGA,EAAImR,EAAWvR,OAAQI,IAAK,CACtC,GAAI4V,GAAYzE,EAAWnR,EAC3BsgB,GAAO1Z,IAAIgP,EAAUyK,QAASlP,EAAWnR,IACvCqgB,QAASzK,EAAUyK,QACnBlX,GAAIyM,EAAUzM,GACd6T,cAIJ,IAAKhd,EAAI,EAAGA,EAAImR,EAAWvR,OAAQI,IACjCkgB,EAAY/O,EAAWnR,GAGzB,OAAOygB,GAAQD,GAtBjB,GAAIM,MACAnU,EAAwBxL,EAA6BJ,EAqFzD,OAAO,UAASP,EAAS8C,EAAOpE,GAqH9B,QAAS6hB,GAAeld,GACtB,GAAImd,GAAW,IAAMhB,EAAsB,IACvCjX,EAAQlF,EAAKod,aAAajB,IACrBnc,GACDA,EAAKoZ,iBAAiB+D,GAC1B5L,IAOJ,OANAtV,GAAQiJ,EAAO,SAASlF,GACtB,GAAIxB,GAAOwB,EAAK8H,aAAaqU,EACzB3d,IAAQA,EAAKzC,QACfwV,EAAQhJ,KAAKvI,KAGVuR,EAGT,QAAS8L,GAAgB/P,GACvB,GAAIgQ,MACAC,IACJthB,GAAQqR,EAAY,SAASyE,EAAWxV,GACtC,GAAII,GAAUoV,EAAUpV,QACpBqD,EAAOT,EAAW5C,GAClB8C,EAAQsS,EAAUtS,MAClB+d,GAAe,QAAS,QAAQhhB,QAAQiD,IAAU,EAClDge,EAAc1L,EAAUrE,WAAawP,EAAeld,KAExD,IAAIyd,EAAY1hB,OAAQ,CACtB,GAAI2hB,GAAYF,EAAc,KAAO,MAErCvhB,GAAQwhB,EAAa,SAASzN,GAC5B,GAAI5Q,GAAM4Q,EAAOlI,aAAaqU,EAC9BoB,GAAUne,GAAOme,EAAUne,OAC3Bme,EAAUne,GAAKse,IACbC,YAAaphB,EACbI,QAASC,EAAOoT,UAIpBsN,GAAmB/U,KAAKwJ,IAI5B,IAAI6L,MACAC,IAqDJ,OApDA5hB,GAAQshB,EAAW,SAASlK,EAAYjU,GACtC,GAAI5D,GAAO6X,EAAW7X,KAClBD,EAAK8X,EAAW9X,EAEpB,KAAKC,IAASD,EAAI,CAGhB,GAAIgB,GAAQf,EAAOA,EAAKmiB,YAAcpiB,EAAGoiB,YACrCG,EAAWvhB,EAAMwhB,UAKrB,aAJKH,EAAkBE,KACrBF,EAAkBE,IAAY,EAC9BR,EAAmB/U,KAAK+E,EAAW/Q,MAKvC,GAAIiV,GAAgBlE,EAAW9R,EAAKmiB,aAChCjM,EAAcpE,EAAW/R,EAAGoiB,aAC5BK,EAAYxiB,EAAKmiB,YAAYI,UACjC,KAAKF,EAAaG,GAAY,CAC5B,GAAIC,GAAQJ,EAAaG,IACvBtQ,YAAY,EACZwQ,YAAa,WACX1M,EAAc0M,cACdxM,EAAYwM,eAEdjV,MAAO,WACLuI,EAAcvI,QACdyI,EAAYzI,SAEdvN,QAASyiB,EAAuB3M,EAAc9V,QAASgW,EAAYhW,SACnEF,KAAMgW,EACNjW,GAAImW,EACJH,WAME0M,GAAMviB,QAAQK,OAChBuhB,EAAmB/U,KAAK0V,IAExBX,EAAmB/U,KAAKiJ,GACxB8L,EAAmB/U,KAAKmJ,IAI5BmM,EAAaG,GAAWzM,QAAQhJ,MAC9B6V,IAAO5iB,EAAKmB,QAAS0hB,KAAM9iB,EAAGoB,YAI3B2gB,EAGT,QAASa,GAAuBnjB,EAAEC,GAChCD,EAAIA,EAAEgB,MAAM,KACZf,EAAIA,EAAEe,MAAM,IAGZ,KAAK,GAFDyW,MAEKtW,EAAI,EAAGA,EAAInB,EAAEe,OAAQI,IAAK,CACjC,GAAImiB,GAAKtjB,EAAEmB,EACX,IAA0B,QAAtBmiB,EAAGvc,UAAU,EAAE,GAEnB,IAAK,GAAIwc,GAAI,EAAGA,EAAItjB,EAAEc,OAAQwiB,IAC5B,GAAID,IAAOrjB,EAAEsjB,GAAI,CACf9L,EAAQlK,KAAK+V,EACb,QAKN,MAAO7L,GAAQtX,KAAK,KAGtB,QAASqjB,GAAkBtM,GAGzB,IAAK,GAAI/V,GAAI4S,EAAQhT,OAAS,EAAGI,GAAK,EAAGA,IAAK,CAC5C,GAAIsiB,GAAa1P,EAAQ5S,EACzB,IAAKoW,EAAUmM,IAAID,GAAnB,CAEA,GAAIE,GAAUpM,EAAUzP,IAAI2b,GACxBG,EAASD,EAAQzM,EACrB,IAAI0M,EACF,MAAOA,KAKb,QAASV,KACPvhB,EAAQQ,SAAS0G,IACbgb,GACF3hB,EAASC,SAASR,EAASkiB,GAEzBC,IACF5hB,EAASG,YAAYV,EAASmiB,GAC9BA,EAAmB,MAIvB,QAASC,GAAuBhN,EAAWiN,GAQzC,QAASC,GAAOtiB,GACduf,EAAUvf,GAASiY,QAAQoK,GARzBjN,EAAUvW,MAAQuW,EAAUxW,IAC9B0jB,EAAOlN,EAAUvW,KAAKmB,SACtBsiB,EAAOlN,EAAUxW,GAAGoB,UAEpBsiB,EAAOlN,EAAUpV,SAQrB,QAASuiB,KACP,GAAI9U,GAAS8R,EAAUvf,IACnByN,GAAqB,UAAV3K,GAAsBpE,EAAQsC,qBAC3CyM,EAAOM,MAIX,QAASzB,GAAMC,GACbvM,EAAQmN,IAAI,WAAYoV,GACxBjD,EAAatf,GAEbmM,EAAsBnM,EAAStB,GAC/BuC,EAAqBjB,EAAStB,GAC9BA,EAAQoC,eAEJohB,GACF3hB,EAASG,YAAYV,EAASkiB,GAGhCliB,EAAQU,YAAYwG,IACpBuG,EAAOC,UAAUnB,GArSnB7N,EAAUkC,EAAwBlC,EAClC,IAAIoS,IAAgB,QAAS,OAAQ,SAASjR,QAAQiD,IAAU,EAM5D2K,EAAS,GAAIlD,IACfwD,IAAK,WAAazB,KAClBgB,OAAQ,WAAahB,GAAM,KAG7B,KAAK8F,EAAQhT,OAEX,MADAkN,KACOmB,CAGT2R,GAAUpf,EAASyN,EAEnB,IAAI1O,GAAUX,EAAa4B,EAAQ6B,KAAK,SAAUzD,EAAaM,EAAQ8B,SAAU9B,EAAQgC,cACrFwhB,EAAcxjB,EAAQwjB,WACtBA,KACFnjB,GAAW,IAAMmjB,EACjBxjB,EAAQwjB,YAAc,KAGxB,IAAIC,EAuBJ,OAtBIrR,KACFqR,EAAmB,MAAQrf,EAAQmE,GACnC1G,EAASC,SAASR,EAASmiB,IAG7B7B,EAAe1U,MAGb5L,QAASA,EACTjB,QAASA,EACT+D,MAAOA,EACPiO,WAAYD,EACZpS,QAASA,EACT6iB,YAAaA,EACbjV,MAAOA,IAGTtM,EAAQgQ,GAAG,WAAYuS,GAKnBjC,EAAelhB,OAAS,EAAUqO,GAEtCiF,EAAW2H,aAAa,WACtB,GAAI1J,KACJrR,GAAQghB,EAAgB,SAASra,GAI3BsZ,EAAUtZ,EAAMjG,SAClB2Q,EAAW/E,KAAK3F,GAEhBA,EAAMqG,UAKVgU,EAAelhB,OAAS,CAExB,IAAIojB,GAAoB9B,EAAgB/P,GACpC8R,IAEJnjB,GAAQkjB,EAAmB,SAASE,GAClCD,EAAqB7W,MACnBiU,QAASjd,EAAW8f,EAAe7jB,KAAO6jB,EAAe7jB,KAAKmB,QAAU0iB,EAAe1iB,SACvF2I,GAAI,WAIF+Z,EAAenB,aAEf,IAAIoB,GAAkBC,EAAUF,EAAepW,MAI3CuW,EAAgBH,EAAe9N,QAC5B8N,EAAe7jB,KAAKmB,SAAW0iB,EAAe9jB,GAAGoB,QAClD0iB,EAAe1iB,OAErB,IAAIuf,EAAUsD,GAAgB,CAC5B,GAAIC,GAAYjB,EAAkBa,EAC9BI,KACFH,EAAmBG,EAAU7U,OAIjC,GAAK0U,EAEE,CACL,GAAII,GAAkBJ,GACtBI,GAAgBrO,KAAK,SAASY,GAC5BsN,GAAStN,KAEX8M,EAAuBM,EAAgBK,OANvCH,UAeRjY,EAAe8U,EAAegD,MAGzBhV,QA2QTuV,IAA0B,WAAY,aAAc,SAASC,EAAUvQ,GACzE,OACEwQ,SAAU,IACVC,WAAY,UACZC,UAAU,EACVC,SAAU,IACVva,KAAM,SAASC,EAAOua,EAAUta,EAAOua,EAAMC,GAC3C,GAAIC,GAAiBC,CACrB3a,GAAM4a,iBAAiB3a,EAAM4a,eAAiB5a,EAAM,OAAQ,SAASxG,GAC/DihB,GACFR,EAASY,MAAMJ,GAEbC,IACFA,EAAcI,WACdJ,EAAgB,OAEdlhB,GAAmB,IAAVA,KACXkhB,EAAgB3a,EAAMgb,OACtBP,EAAYE,EAAe,SAAS1jB,GAClCyjB,EAAkBzjB,EAClBijB,EAASe,MAAMhkB,EAAS,KAAMsjB,WAqwB1CzlB,GAAQomB,OAAO,gBACZC,UAAU,gBAAiBlB,IAE3BkB,UAAU,oBAAqBtb,IAC/BoZ,QAAQ,iBAAkBha,IAE1Bmc,SAAS,iBAAkB3L,IAC3B2L,SAAS,cAAehF,IAExBgF,SAAS,cAAela,IACxBka,SAAS,qBAAsBlS,IAE/BkS,SAAS,cAAexO,IACxBwO,SAAS,oBAAqBjM,KAG9Bta,OAAQA,OAAOC","file":"angular-animate.min.js","sourcesContent":["/**\n * @license AngularJS v1.5.0\n * (c) 2010-2016 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/* jshint ignore:start */\nvar noop        = angular.noop;\nvar copy        = angular.copy;\nvar extend      = angular.extend;\nvar jqLite      = angular.element;\nvar forEach     = angular.forEach;\nvar isArray     = angular.isArray;\nvar isString    = angular.isString;\nvar isObject    = angular.isObject;\nvar isUndefined = angular.isUndefined;\nvar isDefined   = angular.isDefined;\nvar isFunction  = angular.isFunction;\nvar isElement   = angular.isElement;\n\nvar ELEMENT_NODE = 1;\nvar COMMENT_NODE = 8;\n\nvar ADD_CLASS_SUFFIX = '-add';\nvar REMOVE_CLASS_SUFFIX = '-remove';\nvar EVENT_CLASS_PREFIX = 'ng-';\nvar ACTIVE_CLASS_SUFFIX = '-active';\nvar PREPARE_CLASS_SUFFIX = '-prepare';\n\nvar NG_ANIMATE_CLASSNAME = 'ng-animate';\nvar NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';\n\n// Detect proper transitionend/animationend event names.\nvar CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;\n\n// If unprefixed events are not supported but webkit-prefixed are, use the latter.\n// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.\n// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`\n// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.\n// Register both events in case `window.onanimationend` is not supported because of that,\n// do the same for `transitionend` as Safari is likely to exhibit similar behavior.\n// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit\n// therefore there is no reason to test anymore for other vendor prefixes:\n// http://caniuse.com/#search=transition\nif (isUndefined(window.ontransitionend) && isDefined(window.onwebkittransitionend)) {\n  CSS_PREFIX = '-webkit-';\n  TRANSITION_PROP = 'WebkitTransition';\n  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';\n} else {\n  TRANSITION_PROP = 'transition';\n  TRANSITIONEND_EVENT = 'transitionend';\n}\n\nif (isUndefined(window.onanimationend) && isDefined(window.onwebkitanimationend)) {\n  CSS_PREFIX = '-webkit-';\n  ANIMATION_PROP = 'WebkitAnimation';\n  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';\n} else {\n  ANIMATION_PROP = 'animation';\n  ANIMATIONEND_EVENT = 'animationend';\n}\n\nvar DURATION_KEY = 'Duration';\nvar PROPERTY_KEY = 'Property';\nvar DELAY_KEY = 'Delay';\nvar TIMING_KEY = 'TimingFunction';\nvar ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';\nvar ANIMATION_PLAYSTATE_KEY = 'PlayState';\nvar SAFE_FAST_FORWARD_DURATION_VALUE = 9999;\n\nvar ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;\nvar ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;\nvar TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;\nvar TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;\n\nvar isPromiseLike = function(p) {\n  return p && p.then ? true : false;\n};\n\nvar ngMinErr = angular.$$minErr('ng');\nfunction assertArg(arg, name, reason) {\n  if (!arg) {\n    throw ngMinErr('areq', \"Argument '{0}' is {1}\", (name || '?'), (reason || \"required\"));\n  }\n  return arg;\n}\n\nfunction mergeClasses(a,b) {\n  if (!a && !b) return '';\n  if (!a) return b;\n  if (!b) return a;\n  if (isArray(a)) a = a.join(' ');\n  if (isArray(b)) b = b.join(' ');\n  return a + ' ' + b;\n}\n\nfunction packageStyles(options) {\n  var styles = {};\n  if (options && (options.to || options.from)) {\n    styles.to = options.to;\n    styles.from = options.from;\n  }\n  return styles;\n}\n\nfunction pendClasses(classes, fix, isPrefix) {\n  var className = '';\n  classes = isArray(classes)\n      ? classes\n      : classes && isString(classes) && classes.length\n          ? classes.split(/\\s+/)\n          : [];\n  forEach(classes, function(klass, i) {\n    if (klass && klass.length > 0) {\n      className += (i > 0) ? ' ' : '';\n      className += isPrefix ? fix + klass\n                            : klass + fix;\n    }\n  });\n  return className;\n}\n\nfunction removeFromArray(arr, val) {\n  var index = arr.indexOf(val);\n  if (val >= 0) {\n    arr.splice(index, 1);\n  }\n}\n\nfunction stripCommentsFromElement(element) {\n  if (element instanceof jqLite) {\n    switch (element.length) {\n      case 0:\n        return [];\n        break;\n\n      case 1:\n        // there is no point of stripping anything if the element\n        // is the only element within the jqLite wrapper.\n        // (it's important that we retain the element instance.)\n        if (element[0].nodeType === ELEMENT_NODE) {\n          return element;\n        }\n        break;\n\n      default:\n        return jqLite(extractElementNode(element));\n        break;\n    }\n  }\n\n  if (element.nodeType === ELEMENT_NODE) {\n    return jqLite(element);\n  }\n}\n\nfunction extractElementNode(element) {\n  if (!element[0]) return element;\n  for (var i = 0; i < element.length; i++) {\n    var elm = element[i];\n    if (elm.nodeType == ELEMENT_NODE) {\n      return elm;\n    }\n  }\n}\n\nfunction $$addClass($$jqLite, element, className) {\n  forEach(element, function(elm) {\n    $$jqLite.addClass(elm, className);\n  });\n}\n\nfunction $$removeClass($$jqLite, element, className) {\n  forEach(element, function(elm) {\n    $$jqLite.removeClass(elm, className);\n  });\n}\n\nfunction applyAnimationClassesFactory($$jqLite) {\n  return function(element, options) {\n    if (options.addClass) {\n      $$addClass($$jqLite, element, options.addClass);\n      options.addClass = null;\n    }\n    if (options.removeClass) {\n      $$removeClass($$jqLite, element, options.removeClass);\n      options.removeClass = null;\n    }\n  }\n}\n\nfunction prepareAnimationOptions(options) {\n  options = options || {};\n  if (!options.$$prepared) {\n    var domOperation = options.domOperation || noop;\n    options.domOperation = function() {\n      options.$$domOperationFired = true;\n      domOperation();\n      domOperation = noop;\n    };\n    options.$$prepared = true;\n  }\n  return options;\n}\n\nfunction applyAnimationStyles(element, options) {\n  applyAnimationFromStyles(element, options);\n  applyAnimationToStyles(element, options);\n}\n\nfunction applyAnimationFromStyles(element, options) {\n  if (options.from) {\n    element.css(options.from);\n    options.from = null;\n  }\n}\n\nfunction applyAnimationToStyles(element, options) {\n  if (options.to) {\n    element.css(options.to);\n    options.to = null;\n  }\n}\n\nfunction mergeAnimationDetails(element, oldAnimation, newAnimation) {\n  var target = oldAnimation.options || {};\n  var newOptions = newAnimation.options || {};\n\n  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');\n  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');\n  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);\n\n  if (newOptions.preparationClasses) {\n    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);\n    delete newOptions.preparationClasses;\n  }\n\n  // noop is basically when there is no callback; otherwise something has been set\n  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;\n\n  extend(target, newOptions);\n\n  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.\n  if (realDomOperation) {\n    target.domOperation = realDomOperation;\n  }\n\n  if (classes.addClass) {\n    target.addClass = classes.addClass;\n  } else {\n    target.addClass = null;\n  }\n\n  if (classes.removeClass) {\n    target.removeClass = classes.removeClass;\n  } else {\n    target.removeClass = null;\n  }\n\n  oldAnimation.addClass = target.addClass;\n  oldAnimation.removeClass = target.removeClass;\n\n  return target;\n}\n\nfunction resolveElementClasses(existing, toAdd, toRemove) {\n  var ADD_CLASS = 1;\n  var REMOVE_CLASS = -1;\n\n  var flags = {};\n  existing = splitClassesToLookup(existing);\n\n  toAdd = splitClassesToLookup(toAdd);\n  forEach(toAdd, function(value, key) {\n    flags[key] = ADD_CLASS;\n  });\n\n  toRemove = splitClassesToLookup(toRemove);\n  forEach(toRemove, function(value, key) {\n    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;\n  });\n\n  var classes = {\n    addClass: '',\n    removeClass: ''\n  };\n\n  forEach(flags, function(val, klass) {\n    var prop, allow;\n    if (val === ADD_CLASS) {\n      prop = 'addClass';\n      allow = !existing[klass];\n    } else if (val === REMOVE_CLASS) {\n      prop = 'removeClass';\n      allow = existing[klass];\n    }\n    if (allow) {\n      if (classes[prop].length) {\n        classes[prop] += ' ';\n      }\n      classes[prop] += klass;\n    }\n  });\n\n  function splitClassesToLookup(classes) {\n    if (isString(classes)) {\n      classes = classes.split(' ');\n    }\n\n    var obj = {};\n    forEach(classes, function(klass) {\n      // sometimes the split leaves empty string values\n      // incase extra spaces were applied to the options\n      if (klass.length) {\n        obj[klass] = true;\n      }\n    });\n    return obj;\n  }\n\n  return classes;\n}\n\nfunction getDomNode(element) {\n  return (element instanceof angular.element) ? element[0] : element;\n}\n\nfunction applyGeneratedPreparationClasses(element, event, options) {\n  var classes = '';\n  if (event) {\n    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);\n  }\n  if (options.addClass) {\n    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));\n  }\n  if (options.removeClass) {\n    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));\n  }\n  if (classes.length) {\n    options.preparationClasses = classes;\n    element.addClass(classes);\n  }\n}\n\nfunction clearGeneratedClasses(element, options) {\n  if (options.preparationClasses) {\n    element.removeClass(options.preparationClasses);\n    options.preparationClasses = null;\n  }\n  if (options.activeClasses) {\n    element.removeClass(options.activeClasses);\n    options.activeClasses = null;\n  }\n}\n\nfunction blockTransitions(node, duration) {\n  // we use a negative delay value since it performs blocking\n  // yet it doesn't kill any existing transitions running on the\n  // same element which makes this safe for class-based animations\n  var value = duration ? '-' + duration + 's' : '';\n  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);\n  return [TRANSITION_DELAY_PROP, value];\n}\n\nfunction blockKeyframeAnimations(node, applyBlock) {\n  var value = applyBlock ? 'paused' : '';\n  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;\n  applyInlineStyle(node, [key, value]);\n  return [key, value];\n}\n\nfunction applyInlineStyle(node, styleTuple) {\n  var prop = styleTuple[0];\n  var value = styleTuple[1];\n  node.style[prop] = value;\n}\n\nfunction concatWithSpace(a,b) {\n  if (!a) return b;\n  if (!b) return a;\n  return a + ' ' + b;\n}\n\nvar $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {\n  var queue, cancelFn;\n\n  function scheduler(tasks) {\n    // we make a copy since RAFScheduler mutates the state\n    // of the passed in array variable and this would be difficult\n    // to track down on the outside code\n    queue = queue.concat(tasks);\n    nextTick();\n  }\n\n  queue = scheduler.queue = [];\n\n  /* waitUntilQuiet does two things:\n   * 1. It will run the FINAL `fn` value only when an uncanceled RAF has passed through\n   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.\n   *\n   * The motivation here is that animation code can request more time from the scheduler\n   * before the next wave runs. This allows for certain DOM properties such as classes to\n   * be resolved in time for the next animation to run.\n   */\n  scheduler.waitUntilQuiet = function(fn) {\n    if (cancelFn) cancelFn();\n\n    cancelFn = $$rAF(function() {\n      cancelFn = null;\n      fn();\n      nextTick();\n    });\n  };\n\n  return scheduler;\n\n  function nextTick() {\n    if (!queue.length) return;\n\n    var items = queue.shift();\n    for (var i = 0; i < items.length; i++) {\n      items[i]();\n    }\n\n    if (!cancelFn) {\n      $$rAF(function() {\n        if (!cancelFn) nextTick();\n      });\n    }\n  }\n}];\n\n/**\n * @ngdoc directive\n * @name ngAnimateChildren\n * @restrict AE\n * @element ANY\n *\n * @description\n *\n * ngAnimateChildren allows you to specify that children of this element should animate even if any\n * of the children's parents are currently animating. By default, when an element has an active `enter`, `leave`, or `move`\n * (structural) animation, child elements that also have an active structural animation are not animated.\n *\n * Note that even if `ngAnimteChildren` is set, no child animations will run when the parent element is removed from the DOM (`leave` animation).\n *\n *\n * @param {string} ngAnimateChildren If the value is empty, `true` or `on`,\n *     then child animations are allowed. If the value is `false`, child animations are not allowed.\n *\n * @example\n * <example module=\"ngAnimateChildren\" name=\"ngAnimateChildren\" deps=\"angular-animate.js\" animations=\"true\">\n     <file name=\"index.html\">\n       <div ng-controller=\"mainController as main\">\n         <label>Show container? <input type=\"checkbox\" ng-model=\"main.enterElement\" /></label>\n         <label>Animate children? <input type=\"checkbox\" ng-model=\"main.animateChildren\" /></label>\n         <hr>\n         <div ng-animate-children=\"{{main.animateChildren}}\">\n           <div ng-if=\"main.enterElement\" class=\"container\">\n             List of items:\n             <div ng-repeat=\"item in [0, 1, 2, 3]\" class=\"item\">Item {{item}}</div>\n           </div>\n         </div>\n       </div>\n     </file>\n     <file name=\"animations.css\">\n\n      .container.ng-enter,\n      .container.ng-leave {\n        transition: all ease 1.5s;\n      }\n\n      .container.ng-enter,\n      .container.ng-leave-active {\n        opacity: 0;\n      }\n\n      .container.ng-leave,\n      .container.ng-enter-active {\n        opacity: 1;\n      }\n\n      .item {\n        background: firebrick;\n        color: #FFF;\n        margin-bottom: 10px;\n      }\n\n      .item.ng-enter,\n      .item.ng-leave {\n        transition: transform 1.5s ease;\n      }\n\n      .item.ng-enter {\n        transform: translateX(50px);\n      }\n\n      .item.ng-enter-active {\n        transform: translateX(0);\n      }\n    </file>\n    <file name=\"script.js\">\n      angular.module('ngAnimateChildren', ['ngAnimate'])\n        .controller('mainController', function() {\n          this.animateChildren = false;\n          this.enterElement = false;\n        });\n    </file>\n  </example>\n */\nvar $$AnimateChildrenDirective = ['$interpolate', function($interpolate) {\n  return {\n    link: function(scope, element, attrs) {\n      var val = attrs.ngAnimateChildren;\n      if (angular.isString(val) && val.length === 0) { //empty attribute\n        element.data(NG_ANIMATE_CHILDREN_DATA, true);\n      } else {\n        // Interpolate and set the value, so that it is available to\n        // animations that run right after compilation\n        setData($interpolate(val)(scope));\n        attrs.$observe('ngAnimateChildren', setData);\n      }\n\n      function setData(value) {\n        value = value === 'on' || value === 'true';\n        element.data(NG_ANIMATE_CHILDREN_DATA, value);\n      }\n    }\n  };\n}];\n\nvar ANIMATE_TIMER_KEY = '$$animateCss';\n\n/**\n * @ngdoc service\n * @name $animateCss\n * @kind object\n *\n * @description\n * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes\n * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT\n * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or\n * directives to create more complex animations that can be purely driven using CSS code.\n *\n * Note that only browsers that support CSS transitions and/or keyframe animations are capable of\n * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).\n *\n * ## Usage\n * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that\n * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,\n * any automatic control over cancelling animations and/or preventing animations from being run on\n * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to\n * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger\n * the CSS animation.\n *\n * The example below shows how we can create a folding animation on an element using `ng-if`:\n *\n * ```html\n * <!-- notice the `fold-animation` CSS class -->\n * <div ng-if=\"onOff\" class=\"fold-animation\">\n *   This element will go BOOM\n * </div>\n * <button ng-click=\"onOff=true\">Fold In</button>\n * ```\n *\n * Now we create the **JavaScript animation** that will trigger the CSS transition:\n *\n * ```js\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element, doneFn) {\n *       var height = element[0].offsetHeight;\n *       return $animateCss(element, {\n *         from: { height:'0px' },\n *         to: { height:height + 'px' },\n *         duration: 1 // one second\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * ## More Advanced Uses\n *\n * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks\n * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.\n *\n * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,\n * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with\n * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order\n * to provide a working animation that will run in CSS.\n *\n * The example below showcases a more advanced version of the `.fold-animation` from the example above:\n *\n * ```js\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element, doneFn) {\n *       var height = element[0].offsetHeight;\n *       return $animateCss(element, {\n *         addClass: 'red large-text pulse-twice',\n *         easing: 'ease-out',\n *         from: { height:'0px' },\n *         to: { height:height + 'px' },\n *         duration: 1 // one second\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * Since we're adding/removing CSS classes then the CSS transition will also pick those up:\n *\n * ```css\n * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,\n * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/\n * .red { background:red; }\n * .large-text { font-size:20px; }\n *\n * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/\n * .pulse-twice {\n *   animation: 0.5s pulse linear 2;\n *   -webkit-animation: 0.5s pulse linear 2;\n * }\n *\n * @keyframes pulse {\n *   from { transform: scale(0.5); }\n *   to { transform: scale(1.5); }\n * }\n *\n * @-webkit-keyframes pulse {\n *   from { -webkit-transform: scale(0.5); }\n *   to { -webkit-transform: scale(1.5); }\n * }\n * ```\n *\n * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.\n *\n * ## How the Options are handled\n *\n * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation\n * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline\n * styles using the `from` and `to` properties.\n *\n * ```js\n * var animator = $animateCss(element, {\n *   from: { background:'red' },\n *   to: { background:'blue' }\n * });\n * animator.start();\n * ```\n *\n * ```css\n * .rotating-animation {\n *   animation:0.5s rotate linear;\n *   -webkit-animation:0.5s rotate linear;\n * }\n *\n * @keyframes rotate {\n *   from { transform: rotate(0deg); }\n *   to { transform: rotate(360deg); }\n * }\n *\n * @-webkit-keyframes rotate {\n *   from { -webkit-transform: rotate(0deg); }\n *   to { -webkit-transform: rotate(360deg); }\n * }\n * ```\n *\n * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is\n * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition\n * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition\n * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied\n * and spread across the transition and keyframe animation.\n *\n * ## What is returned\n *\n * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually\n * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are\n * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:\n *\n * ```js\n * var animator = $animateCss(element, { ... });\n * ```\n *\n * Now what do the contents of our `animator` variable look like:\n *\n * ```js\n * {\n *   // starts the animation\n *   start: Function,\n *\n *   // ends (aborts) the animation\n *   end: Function\n * }\n * ```\n *\n * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.\n * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and styles may have been\n * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties\n * and that changing them will not reconfigure the parameters of the animation.\n *\n * ### runner.done() vs runner.then()\n * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the\n * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.\n * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`\n * unless you really need a digest to kick off afterwards.\n *\n * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss\n * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).\n * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.\n *\n * @param {DOMElement} element the element that will be animated\n * @param {object} options the animation-related options that will be applied during the animation\n *\n * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied\n * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)\n * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and\n * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.\n * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).\n * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).\n * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).\n * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.\n * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.\n * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.\n * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.\n * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`\n * is provided then the animation will be skipped entirely.\n * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is\n * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value\n * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same\n * CSS delay value.\n * * `stagger` - A numeric time value representing the delay between successively animated elements\n * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})\n * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a\n *   `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)\n * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occurring on the classes being added and removed.)\n * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once\n *    the animation is closed. This is useful for when the styles are used purely for the sake of\n *    the animation and do not have a lasting visual effect on the element (e.g. a collapse and open animation).\n *    By default this value is set to `false`.\n *\n * @return {object} an object with start and end methods and details about the animation.\n *\n * * `start` - The method to start the animation. This will return a `Promise` when called.\n * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.\n */\nvar ONE_SECOND = 1000;\nvar BASE_TEN = 10;\n\nvar ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\nvar CLOSING_TIME_BUFFER = 1.5;\n\nvar DETECT_CSS_PROPERTIES = {\n  transitionDuration:      TRANSITION_DURATION_PROP,\n  transitionDelay:         TRANSITION_DELAY_PROP,\n  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,\n  animationDuration:       ANIMATION_DURATION_PROP,\n  animationDelay:          ANIMATION_DELAY_PROP,\n  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY\n};\n\nvar DETECT_STAGGER_CSS_PROPERTIES = {\n  transitionDuration:      TRANSITION_DURATION_PROP,\n  transitionDelay:         TRANSITION_DELAY_PROP,\n  animationDuration:       ANIMATION_DURATION_PROP,\n  animationDelay:          ANIMATION_DELAY_PROP\n};\n\nfunction getCssKeyframeDurationStyle(duration) {\n  return [ANIMATION_DURATION_PROP, duration + 's'];\n}\n\nfunction getCssDelayStyle(delay, isKeyframeAnimation) {\n  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;\n  return [prop, delay + 's'];\n}\n\nfunction computeCssStyles($window, element, properties) {\n  var styles = Object.create(null);\n  var detectedStyles = $window.getComputedStyle(element) || {};\n  forEach(properties, function(formalStyleName, actualStyleName) {\n    var val = detectedStyles[formalStyleName];\n    if (val) {\n      var c = val.charAt(0);\n\n      // only numerical-based values have a negative sign or digit as the first value\n      if (c === '-' || c === '+' || c >= 0) {\n        val = parseMaxTime(val);\n      }\n\n      // by setting this to null in the event that the delay is not set or is set directly as 0\n      // then we can still allow for negative values to be used later on and not mistake this\n      // value for being greater than any other negative value.\n      if (val === 0) {\n        val = null;\n      }\n      styles[actualStyleName] = val;\n    }\n  });\n\n  return styles;\n}\n\nfunction parseMaxTime(str) {\n  var maxValue = 0;\n  var values = str.split(/\\s*,\\s*/);\n  forEach(values, function(value) {\n    // it's always safe to consider only second values and omit `ms` values since\n    // getComputedStyle will always handle the conversion for us\n    if (value.charAt(value.length - 1) == 's') {\n      value = value.substring(0, value.length - 1);\n    }\n    value = parseFloat(value) || 0;\n    maxValue = maxValue ? Math.max(value, maxValue) : value;\n  });\n  return maxValue;\n}\n\nfunction truthyTimingValue(val) {\n  return val === 0 || val != null;\n}\n\nfunction getCssTransitionDurationStyle(duration, applyOnlyDuration) {\n  var style = TRANSITION_PROP;\n  var value = duration + 's';\n  if (applyOnlyDuration) {\n    style += DURATION_KEY;\n  } else {\n    value += ' linear all';\n  }\n  return [style, value];\n}\n\nfunction createLocalCacheLookup() {\n  var cache = Object.create(null);\n  return {\n    flush: function() {\n      cache = Object.create(null);\n    },\n\n    count: function(key) {\n      var entry = cache[key];\n      return entry ? entry.total : 0;\n    },\n\n    get: function(key) {\n      var entry = cache[key];\n      return entry && entry.value;\n    },\n\n    put: function(key, value) {\n      if (!cache[key]) {\n        cache[key] = { total: 1, value: value };\n      } else {\n        cache[key].total++;\n      }\n    }\n  };\n}\n\n// we do not reassign an already present style value since\n// if we detect the style property value again we may be\n// detecting styles that were added via the `from` styles.\n// We make use of `isDefined` here since an empty string\n// or null value (which is what getPropertyValue will return\n// for a non-existing style) will still be marked as a valid\n// value for the style (a falsy value implies that the style\n// is to be removed at the end of the animation). If we had a simple\n// \"OR\" statement then it would not be enough to catch that.\nfunction registerRestorableStyles(backup, node, properties) {\n  forEach(properties, function(prop) {\n    backup[prop] = isDefined(backup[prop])\n        ? backup[prop]\n        : node.style.getPropertyValue(prop);\n  });\n}\n\nvar $AnimateCssProvider = ['$animateProvider', function($animateProvider) {\n  var gcsLookup = createLocalCacheLookup();\n  var gcsStaggerLookup = createLocalCacheLookup();\n\n  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',\n               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$$animateQueue',\n       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,\n                $$forceReflow,   $sniffer,   $$rAFScheduler, $$animateQueue) {\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    var parentCounter = 0;\n    function gcsHashFn(node, extraClasses) {\n      var KEY = \"$$ngAnimateParentKey\";\n      var parentNode = node.parentNode;\n      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);\n      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;\n    }\n\n    function computeCachedCssStyles(node, className, cacheKey, properties) {\n      var timings = gcsLookup.get(cacheKey);\n\n      if (!timings) {\n        timings = computeCssStyles($window, node, properties);\n        if (timings.animationIterationCount === 'infinite') {\n          timings.animationIterationCount = 1;\n        }\n      }\n\n      // we keep putting this in multiple times even though the value and the cacheKey are the same\n      // because we're keeping an internal tally of how many duplicate animations are detected.\n      gcsLookup.put(cacheKey, timings);\n      return timings;\n    }\n\n    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {\n      var stagger;\n\n      // if we have one or more existing matches of matching elements\n      // containing the same parent + CSS styles (which is how cacheKey works)\n      // then staggering is possible\n      if (gcsLookup.count(cacheKey) > 0) {\n        stagger = gcsStaggerLookup.get(cacheKey);\n\n        if (!stagger) {\n          var staggerClassName = pendClasses(className, '-stagger');\n\n          $$jqLite.addClass(node, staggerClassName);\n\n          stagger = computeCssStyles($window, node, properties);\n\n          // force the conversion of a null value to zero incase not set\n          stagger.animationDuration = Math.max(stagger.animationDuration, 0);\n          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);\n\n          $$jqLite.removeClass(node, staggerClassName);\n\n          gcsStaggerLookup.put(cacheKey, stagger);\n        }\n      }\n\n      return stagger || {};\n    }\n\n    var cancelLastRAFRequest;\n    var rafWaitQueue = [];\n    function waitUntilQuiet(callback) {\n      rafWaitQueue.push(callback);\n      $$rAFScheduler.waitUntilQuiet(function() {\n        gcsLookup.flush();\n        gcsStaggerLookup.flush();\n\n        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.\n        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.\n        var pageWidth = $$forceReflow();\n\n        // we use a for loop to ensure that if the queue is changed\n        // during this looping then it will consider new requests\n        for (var i = 0; i < rafWaitQueue.length; i++) {\n          rafWaitQueue[i](pageWidth);\n        }\n        rafWaitQueue.length = 0;\n      });\n    }\n\n    function computeTimings(node, className, cacheKey) {\n      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);\n      var aD = timings.animationDelay;\n      var tD = timings.transitionDelay;\n      timings.maxDelay = aD && tD\n          ? Math.max(aD, tD)\n          : (aD || tD);\n      timings.maxDuration = Math.max(\n          timings.animationDuration * timings.animationIterationCount,\n          timings.transitionDuration);\n\n      return timings;\n    }\n\n    return function init(element, initialOptions) {\n      // all of the animation functions should create\n      // a copy of the options data, however, if a\n      // parent service has already created a copy then\n      // we should stick to using that\n      var options = initialOptions || {};\n      if (!options.$$prepared) {\n        options = prepareAnimationOptions(copy(options));\n      }\n\n      var restoreStyles = {};\n      var node = getDomNode(element);\n      if (!node\n          || !node.parentNode\n          || !$$animateQueue.enabled()) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var temporaryStyles = [];\n      var classes = element.attr('class');\n      var styles = packageStyles(options);\n      var animationClosed;\n      var animationPaused;\n      var animationCompleted;\n      var runner;\n      var runnerHost;\n      var maxDelay;\n      var maxDelayTime;\n      var maxDuration;\n      var maxDurationTime;\n      var startTime;\n      var events = [];\n\n      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var method = options.event && isArray(options.event)\n            ? options.event.join(' ')\n            : options.event;\n\n      var isStructural = method && options.structural;\n      var structuralClassName = '';\n      var addRemoveClassName = '';\n\n      if (isStructural) {\n        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);\n      } else if (method) {\n        structuralClassName = method;\n      }\n\n      if (options.addClass) {\n        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);\n      }\n\n      if (options.removeClass) {\n        if (addRemoveClassName.length) {\n          addRemoveClassName += ' ';\n        }\n        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);\n      }\n\n      // there may be a situation where a structural animation is combined together\n      // with CSS classes that need to resolve before the animation is computed.\n      // However this means that there is no explicit CSS code to block the animation\n      // from happening (by setting 0s none in the class name). If this is the case\n      // we need to apply the classes before the first rAF so we know to continue if\n      // there actually is a detected transition or keyframe animation\n      if (options.applyClassesEarly && addRemoveClassName.length) {\n        applyAnimationClasses(element, options);\n      }\n\n      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();\n      var fullClassName = classes + ' ' + preparationClasses;\n      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);\n      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;\n      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;\n\n      // there is no way we can trigger an animation if no styles and\n      // no classes are being applied which would then trigger a transition,\n      // unless there a is raw keyframe value that is applied to the element.\n      if (!containsKeyframeAnimation\n           && !hasToStyles\n           && !preparationClasses) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var cacheKey, stagger;\n      if (options.stagger > 0) {\n        var staggerVal = parseFloat(options.stagger);\n        stagger = {\n          transitionDelay: staggerVal,\n          animationDelay: staggerVal,\n          transitionDuration: 0,\n          animationDuration: 0\n        };\n      } else {\n        cacheKey = gcsHashFn(node, fullClassName);\n        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);\n      }\n\n      if (!options.$$skipPreparationClasses) {\n        $$jqLite.addClass(element, preparationClasses);\n      }\n\n      var applyOnlyDuration;\n\n      if (options.transitionStyle) {\n        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];\n        applyInlineStyle(node, transitionStyle);\n        temporaryStyles.push(transitionStyle);\n      }\n\n      if (options.duration >= 0) {\n        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;\n        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);\n\n        // we set the duration so that it will be picked up by getComputedStyle later\n        applyInlineStyle(node, durationStyle);\n        temporaryStyles.push(durationStyle);\n      }\n\n      if (options.keyframeStyle) {\n        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];\n        applyInlineStyle(node, keyframeStyle);\n        temporaryStyles.push(keyframeStyle);\n      }\n\n      var itemIndex = stagger\n          ? options.staggerIndex >= 0\n              ? options.staggerIndex\n              : gcsLookup.count(cacheKey)\n          : 0;\n\n      var isFirst = itemIndex === 0;\n\n      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY\n      // without causing any combination of transitions to kick in. By adding a negative delay value\n      // it forces the setup class' transition to end immediately. We later then remove the negative\n      // transition delay to allow for the transition to naturally do it's thing. The beauty here is\n      // that if there is no transition defined then nothing will happen and this will also allow\n      // other transitions to be stacked on top of each other without any chopping them out.\n      if (isFirst && !options.skipBlocking) {\n        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);\n      }\n\n      var timings = computeTimings(node, fullClassName, cacheKey);\n      var relativeDelay = timings.maxDelay;\n      maxDelay = Math.max(relativeDelay, 0);\n      maxDuration = timings.maxDuration;\n\n      var flags = {};\n      flags.hasTransitions          = timings.transitionDuration > 0;\n      flags.hasAnimations           = timings.animationDuration > 0;\n      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty == 'all';\n      flags.applyTransitionDuration = hasToStyles && (\n                                        (flags.hasTransitions && !flags.hasTransitionAll)\n                                         || (flags.hasAnimations && !flags.hasTransitions));\n      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;\n      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);\n      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;\n      flags.recalculateTimingStyles = addRemoveClassName.length > 0;\n\n      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {\n        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;\n\n        if (flags.applyTransitionDuration) {\n          flags.hasTransitions = true;\n          timings.transitionDuration = maxDuration;\n          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;\n          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));\n        }\n\n        if (flags.applyAnimationDuration) {\n          flags.hasAnimations = true;\n          timings.animationDuration = maxDuration;\n          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));\n        }\n      }\n\n      if (maxDuration === 0 && !flags.recalculateTimingStyles) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      if (options.delay != null) {\n        var delayStyle;\n        if (typeof options.delay !== \"boolean\") {\n          delayStyle = parseFloat(options.delay);\n          // number in options.delay means we have to recalculate the delay for the closing timeout\n          maxDelay = Math.max(delayStyle, 0);\n        }\n\n        if (flags.applyTransitionDelay) {\n          temporaryStyles.push(getCssDelayStyle(delayStyle));\n        }\n\n        if (flags.applyAnimationDelay) {\n          temporaryStyles.push(getCssDelayStyle(delayStyle, true));\n        }\n      }\n\n      // we need to recalculate the delay value since we used a pre-emptive negative\n      // delay value and the delay value is required for the final event checking. This\n      // property will ensure that this will happen after the RAF phase has passed.\n      if (options.duration == null && timings.transitionDuration > 0) {\n        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;\n      }\n\n      maxDelayTime = maxDelay * ONE_SECOND;\n      maxDurationTime = maxDuration * ONE_SECOND;\n      if (!options.skipBlocking) {\n        flags.blockTransition = timings.transitionDuration > 0;\n        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&\n                                       stagger.animationDelay > 0 &&\n                                       stagger.animationDuration === 0;\n      }\n\n      if (options.from) {\n        if (options.cleanupStyles) {\n          registerRestorableStyles(restoreStyles, node, Object.keys(options.from));\n        }\n        applyAnimationFromStyles(element, options);\n      }\n\n      if (flags.blockTransition || flags.blockKeyframeAnimation) {\n        applyBlocking(maxDuration);\n      } else if (!options.skipBlocking) {\n        blockTransitions(node, false);\n      }\n\n      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging\n      return {\n        $$willAnimate: true,\n        end: endFn,\n        start: function() {\n          if (animationClosed) return;\n\n          runnerHost = {\n            end: endFn,\n            cancel: cancelFn,\n            resume: null, //this will be set during the start() phase\n            pause: null\n          };\n\n          runner = new $$AnimateRunner(runnerHost);\n\n          waitUntilQuiet(start);\n\n          // we don't have access to pause/resume the animation\n          // since it hasn't run yet. AnimateRunner will therefore\n          // set noop functions for resume and pause and they will\n          // later be overridden once the animation is triggered\n          return runner;\n        }\n      };\n\n      function endFn() {\n        close();\n      }\n\n      function cancelFn() {\n        close(true);\n      }\n\n      function close(rejected) { // jshint ignore:line\n        // if the promise has been called already then we shouldn't close\n        // the animation again\n        if (animationClosed || (animationCompleted && animationPaused)) return;\n        animationClosed = true;\n        animationPaused = false;\n\n        if (!options.$$skipPreparationClasses) {\n          $$jqLite.removeClass(element, preparationClasses);\n        }\n        $$jqLite.removeClass(element, activeClasses);\n\n        blockKeyframeAnimations(node, false);\n        blockTransitions(node, false);\n\n        forEach(temporaryStyles, function(entry) {\n          // There is only one way to remove inline style properties entirely from elements.\n          // By using `removeProperty` this works, but we need to convert camel-cased CSS\n          // styles down to hyphenated values.\n          node.style[entry[0]] = '';\n        });\n\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n\n        if (Object.keys(restoreStyles).length) {\n          forEach(restoreStyles, function(value, prop) {\n            value ? node.style.setProperty(prop, value)\n                  : node.style.removeProperty(prop);\n          });\n        }\n\n        // the reason why we have this option is to allow a synchronous closing callback\n        // that is fired as SOON as the animation ends (when the CSS is removed) or if\n        // the animation never takes off at all. A good example is a leave animation since\n        // the element must be removed just after the animation is over or else the element\n        // will appear on screen for one animation frame causing an overbearing flicker.\n        if (options.onDone) {\n          options.onDone();\n        }\n\n        if (events && events.length) {\n          // Remove the transitionend / animationend listener(s)\n          element.off(events.join(' '), onAnimationProgress);\n        }\n\n        //Cancel the fallback closing timeout and remove the timer data\n        var animationTimerData = element.data(ANIMATE_TIMER_KEY);\n        if (animationTimerData) {\n          $timeout.cancel(animationTimerData[0].timer);\n          element.removeData(ANIMATE_TIMER_KEY);\n        }\n\n        // if the preparation function fails then the promise is not setup\n        if (runner) {\n          runner.complete(!rejected);\n        }\n      }\n\n      function applyBlocking(duration) {\n        if (flags.blockTransition) {\n          blockTransitions(node, duration);\n        }\n\n        if (flags.blockKeyframeAnimation) {\n          blockKeyframeAnimations(node, !!duration);\n        }\n      }\n\n      function closeAndReturnNoopAnimator() {\n        runner = new $$AnimateRunner({\n          end: endFn,\n          cancel: cancelFn\n        });\n\n        // should flush the cache animation\n        waitUntilQuiet(noop);\n        close();\n\n        return {\n          $$willAnimate: false,\n          start: function() {\n            return runner;\n          },\n          end: endFn\n        };\n      }\n\n      function onAnimationProgress(event) {\n        event.stopPropagation();\n        var ev = event.originalEvent || event;\n\n        // we now always use `Date.now()` due to the recent changes with\n        // event.timeStamp in Firefox, Webkit and Chrome (see #13494 for more info)\n        var timeStamp = ev.$manualTimeStamp || Date.now();\n\n        /* Firefox (or possibly just Gecko) likes to not round values up\n         * when a ms measurement is used for the animation */\n        var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));\n\n        /* $manualTimeStamp is a mocked timeStamp value which is set\n         * within browserTrigger(). This is only here so that tests can\n         * mock animations properly. Real events fallback to event.timeStamp,\n         * or, if they don't, then a timeStamp is automatically created for them.\n         * We're checking to see if the timeStamp surpasses the expected delay,\n         * but we're using elapsedTime instead of the timeStamp on the 2nd\n         * pre-condition since animationPauseds sometimes close off early */\n        if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {\n          // we set this flag to ensure that if the transition is paused then, when resumed,\n          // the animation will automatically close itself since transitions cannot be paused.\n          animationCompleted = true;\n          close();\n        }\n      }\n\n      function start() {\n        if (animationClosed) return;\n        if (!node.parentNode) {\n          close();\n          return;\n        }\n\n        // even though we only pause keyframe animations here the pause flag\n        // will still happen when transitions are used. Only the transition will\n        // not be paused since that is not possible. If the animation ends when\n        // paused then it will not complete until unpaused or cancelled.\n        var playPause = function(playAnimation) {\n          if (!animationCompleted) {\n            animationPaused = !playAnimation;\n            if (timings.animationDuration) {\n              var value = blockKeyframeAnimations(node, animationPaused);\n              animationPaused\n                  ? temporaryStyles.push(value)\n                  : removeFromArray(temporaryStyles, value);\n            }\n          } else if (animationPaused && playAnimation) {\n            animationPaused = false;\n            close();\n          }\n        };\n\n        // checking the stagger duration prevents an accidentally cascade of the CSS delay style\n        // being inherited from the parent. If the transition duration is zero then we can safely\n        // rely that the delay value is an intentional stagger delay style.\n        var maxStagger = itemIndex > 0\n                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||\n                            (timings.animationDuration && stagger.animationDuration === 0))\n                         && Math.max(stagger.animationDelay, stagger.transitionDelay);\n        if (maxStagger) {\n          $timeout(triggerAnimationStart,\n                   Math.floor(maxStagger * itemIndex * ONE_SECOND),\n                   false);\n        } else {\n          triggerAnimationStart();\n        }\n\n        // this will decorate the existing promise runner with pause/resume methods\n        runnerHost.resume = function() {\n          playPause(true);\n        };\n\n        runnerHost.pause = function() {\n          playPause(false);\n        };\n\n        function triggerAnimationStart() {\n          // just incase a stagger animation kicks in when the animation\n          // itself was cancelled entirely\n          if (animationClosed) return;\n\n          applyBlocking(false);\n\n          forEach(temporaryStyles, function(entry) {\n            var key = entry[0];\n            var value = entry[1];\n            node.style[key] = value;\n          });\n\n          applyAnimationClasses(element, options);\n          $$jqLite.addClass(element, activeClasses);\n\n          if (flags.recalculateTimingStyles) {\n            fullClassName = node.className + ' ' + preparationClasses;\n            cacheKey = gcsHashFn(node, fullClassName);\n\n            timings = computeTimings(node, fullClassName, cacheKey);\n            relativeDelay = timings.maxDelay;\n            maxDelay = Math.max(relativeDelay, 0);\n            maxDuration = timings.maxDuration;\n\n            if (maxDuration === 0) {\n              close();\n              return;\n            }\n\n            flags.hasTransitions = timings.transitionDuration > 0;\n            flags.hasAnimations = timings.animationDuration > 0;\n          }\n\n          if (flags.applyAnimationDelay) {\n            relativeDelay = typeof options.delay !== \"boolean\" && truthyTimingValue(options.delay)\n                  ? parseFloat(options.delay)\n                  : relativeDelay;\n\n            maxDelay = Math.max(relativeDelay, 0);\n            timings.animationDelay = relativeDelay;\n            delayStyle = getCssDelayStyle(relativeDelay, true);\n            temporaryStyles.push(delayStyle);\n            node.style[delayStyle[0]] = delayStyle[1];\n          }\n\n          maxDelayTime = maxDelay * ONE_SECOND;\n          maxDurationTime = maxDuration * ONE_SECOND;\n\n          if (options.easing) {\n            var easeProp, easeVal = options.easing;\n            if (flags.hasTransitions) {\n              easeProp = TRANSITION_PROP + TIMING_KEY;\n              temporaryStyles.push([easeProp, easeVal]);\n              node.style[easeProp] = easeVal;\n            }\n            if (flags.hasAnimations) {\n              easeProp = ANIMATION_PROP + TIMING_KEY;\n              temporaryStyles.push([easeProp, easeVal]);\n              node.style[easeProp] = easeVal;\n            }\n          }\n\n          if (timings.transitionDuration) {\n            events.push(TRANSITIONEND_EVENT);\n          }\n\n          if (timings.animationDuration) {\n            events.push(ANIMATIONEND_EVENT);\n          }\n\n          startTime = Date.now();\n          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;\n          var endTime = startTime + timerTime;\n\n          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];\n          var setupFallbackTimer = true;\n          if (animationsData.length) {\n            var currentTimerData = animationsData[0];\n            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;\n            if (setupFallbackTimer) {\n              $timeout.cancel(currentTimerData.timer);\n            } else {\n              animationsData.push(close);\n            }\n          }\n\n          if (setupFallbackTimer) {\n            var timer = $timeout(onAnimationExpired, timerTime, false);\n            animationsData[0] = {\n              timer: timer,\n              expectedEndTime: endTime\n            };\n            animationsData.push(close);\n            element.data(ANIMATE_TIMER_KEY, animationsData);\n          }\n\n          if (events.length) {\n            element.on(events.join(' '), onAnimationProgress);\n          }\n\n          if (options.to) {\n            if (options.cleanupStyles) {\n              registerRestorableStyles(restoreStyles, node, Object.keys(options.to));\n            }\n            applyAnimationToStyles(element, options);\n          }\n        }\n\n        function onAnimationExpired() {\n          var animationsData = element.data(ANIMATE_TIMER_KEY);\n\n          // this will be false in the event that the element was\n          // removed from the DOM (via a leave animation or something\n          // similar)\n          if (animationsData) {\n            for (var i = 1; i < animationsData.length; i++) {\n              animationsData[i]();\n            }\n            element.removeData(ANIMATE_TIMER_KEY);\n          }\n        }\n      }\n    };\n  }];\n}];\n\nvar $$AnimateCssDriverProvider = ['$$animationProvider', function($$animationProvider) {\n  $$animationProvider.drivers.push('$$animateCssDriver');\n\n  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';\n  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';\n\n  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';\n  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';\n\n  function isDocumentFragment(node) {\n    return node.parentNode && node.parentNode.nodeType === 11;\n  }\n\n  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',\n       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $sniffer,   $$jqLite,   $document) {\n\n    // only browsers that support these properties can render animations\n    if (!$sniffer.animations && !$sniffer.transitions) return noop;\n\n    var bodyNode = $document[0].body;\n    var rootNode = getDomNode($rootElement);\n\n    var rootBodyElement = jqLite(\n      // this is to avoid using something that exists outside of the body\n      // we also special case the doc fragment case because our unit test code\n      // appends the $rootElement to the body after the app has been bootstrapped\n      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode\n    );\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    return function initDriverFn(animationDetails) {\n      return animationDetails.from && animationDetails.to\n          ? prepareFromToAnchorAnimation(animationDetails.from,\n                                         animationDetails.to,\n                                         animationDetails.classes,\n                                         animationDetails.anchors)\n          : prepareRegularAnimation(animationDetails);\n    };\n\n    function filterCssClasses(classes) {\n      //remove all the `ng-` stuff\n      return classes.replace(/\\bng-\\S+\\b/g, '');\n    }\n\n    function getUniqueValues(a, b) {\n      if (isString(a)) a = a.split(' ');\n      if (isString(b)) b = b.split(' ');\n      return a.filter(function(val) {\n        return b.indexOf(val) === -1;\n      }).join(' ');\n    }\n\n    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {\n      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));\n      var startingClasses = filterCssClasses(getClassVal(clone));\n\n      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\n      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\n\n      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);\n\n      rootBodyElement.append(clone);\n\n      var animatorIn, animatorOut = prepareOutAnimation();\n\n      // the user may not end up using the `out` animation and\n      // only making use of the `in` animation or vice-versa.\n      // In either case we should allow this and not assume the\n      // animation is over unless both animations are not used.\n      if (!animatorOut) {\n        animatorIn = prepareInAnimation();\n        if (!animatorIn) {\n          return end();\n        }\n      }\n\n      var startingAnimator = animatorOut || animatorIn;\n\n      return {\n        start: function() {\n          var runner;\n\n          var currentAnimation = startingAnimator.start();\n          currentAnimation.done(function() {\n            currentAnimation = null;\n            if (!animatorIn) {\n              animatorIn = prepareInAnimation();\n              if (animatorIn) {\n                currentAnimation = animatorIn.start();\n                currentAnimation.done(function() {\n                  currentAnimation = null;\n                  end();\n                  runner.complete();\n                });\n                return currentAnimation;\n              }\n            }\n            // in the event that there is no `in` animation\n            end();\n            runner.complete();\n          });\n\n          runner = new $$AnimateRunner({\n            end: endFn,\n            cancel: endFn\n          });\n\n          return runner;\n\n          function endFn() {\n            if (currentAnimation) {\n              currentAnimation.end();\n            }\n          }\n        }\n      };\n\n      function calculateAnchorStyles(anchor) {\n        var styles = {};\n\n        var coords = getDomNode(anchor).getBoundingClientRect();\n\n        // we iterate directly since safari messes up and doesn't return\n        // all the keys for the coords object when iterated\n        forEach(['width','height','top','left'], function(key) {\n          var value = coords[key];\n          switch (key) {\n            case 'top':\n              value += bodyNode.scrollTop;\n              break;\n            case 'left':\n              value += bodyNode.scrollLeft;\n              break;\n          }\n          styles[key] = Math.floor(value) + 'px';\n        });\n        return styles;\n      }\n\n      function prepareOutAnimation() {\n        var animator = $animateCss(clone, {\n          addClass: NG_OUT_ANCHOR_CLASS_NAME,\n          delay: true,\n          from: calculateAnchorStyles(outAnchor)\n        });\n\n        // read the comment within `prepareRegularAnimation` to understand\n        // why this check is necessary\n        return animator.$$willAnimate ? animator : null;\n      }\n\n      function getClassVal(element) {\n        return element.attr('class') || '';\n      }\n\n      function prepareInAnimation() {\n        var endingClasses = filterCssClasses(getClassVal(inAnchor));\n        var toAdd = getUniqueValues(endingClasses, startingClasses);\n        var toRemove = getUniqueValues(startingClasses, endingClasses);\n\n        var animator = $animateCss(clone, {\n          to: calculateAnchorStyles(inAnchor),\n          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,\n          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,\n          delay: true\n        });\n\n        // read the comment within `prepareRegularAnimation` to understand\n        // why this check is necessary\n        return animator.$$willAnimate ? animator : null;\n      }\n\n      function end() {\n        clone.remove();\n        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\n        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\n      }\n    }\n\n    function prepareFromToAnchorAnimation(from, to, classes, anchors) {\n      var fromAnimation = prepareRegularAnimation(from, noop);\n      var toAnimation = prepareRegularAnimation(to, noop);\n\n      var anchorAnimations = [];\n      forEach(anchors, function(anchor) {\n        var outElement = anchor['out'];\n        var inElement = anchor['in'];\n        var animator = prepareAnchoredAnimation(classes, outElement, inElement);\n        if (animator) {\n          anchorAnimations.push(animator);\n        }\n      });\n\n      // no point in doing anything when there are no elements to animate\n      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;\n\n      return {\n        start: function() {\n          var animationRunners = [];\n\n          if (fromAnimation) {\n            animationRunners.push(fromAnimation.start());\n          }\n\n          if (toAnimation) {\n            animationRunners.push(toAnimation.start());\n          }\n\n          forEach(anchorAnimations, function(animation) {\n            animationRunners.push(animation.start());\n          });\n\n          var runner = new $$AnimateRunner({\n            end: endFn,\n            cancel: endFn // CSS-driven animations cannot be cancelled, only ended\n          });\n\n          $$AnimateRunner.all(animationRunners, function(status) {\n            runner.complete(status);\n          });\n\n          return runner;\n\n          function endFn() {\n            forEach(animationRunners, function(runner) {\n              runner.end();\n            });\n          }\n        }\n      };\n    }\n\n    function prepareRegularAnimation(animationDetails) {\n      var element = animationDetails.element;\n      var options = animationDetails.options || {};\n\n      if (animationDetails.structural) {\n        options.event = animationDetails.event;\n        options.structural = true;\n        options.applyClassesEarly = true;\n\n        // we special case the leave animation since we want to ensure that\n        // the element is removed as soon as the animation is over. Otherwise\n        // a flicker might appear or the element may not be removed at all\n        if (animationDetails.event === 'leave') {\n          options.onDone = options.domOperation;\n        }\n      }\n\n      // We assign the preparationClasses as the actual animation event since\n      // the internals of $animateCss will just suffix the event token values\n      // with `-active` to trigger the animation.\n      if (options.preparationClasses) {\n        options.event = concatWithSpace(options.event, options.preparationClasses);\n      }\n\n      var animator = $animateCss(element, options);\n\n      // the driver lookup code inside of $$animation attempts to spawn a\n      // driver one by one until a driver returns a.$$willAnimate animator object.\n      // $animateCss will always return an object, however, it will pass in\n      // a flag as a hint as to whether an animation was detected or not\n      return animator.$$willAnimate ? animator : null;\n    }\n  }];\n}];\n\n// TODO(matsko): use caching here to speed things up for detection\n// TODO(matsko): add documentation\n//  by the time...\n\nvar $$AnimateJsProvider = ['$animateProvider', function($animateProvider) {\n  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',\n       function($injector,   $$AnimateRunner,   $$jqLite) {\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n         // $animateJs(element, 'enter');\n    return function(element, event, classes, options) {\n      var animationClosed = false;\n\n      // the `classes` argument is optional and if it is not used\n      // then the classes will be resolved from the element's className\n      // property as well as options.addClass/options.removeClass.\n      if (arguments.length === 3 && isObject(classes)) {\n        options = classes;\n        classes = null;\n      }\n\n      options = prepareAnimationOptions(options);\n      if (!classes) {\n        classes = element.attr('class') || '';\n        if (options.addClass) {\n          classes += ' ' + options.addClass;\n        }\n        if (options.removeClass) {\n          classes += ' ' + options.removeClass;\n        }\n      }\n\n      var classesToAdd = options.addClass;\n      var classesToRemove = options.removeClass;\n\n      // the lookupAnimations function returns a series of animation objects that are\n      // matched up with one or more of the CSS classes. These animation objects are\n      // defined via the module.animation factory function. If nothing is detected then\n      // we don't return anything which then makes $animation query the next driver.\n      var animations = lookupAnimations(classes);\n      var before, after;\n      if (animations.length) {\n        var afterFn, beforeFn;\n        if (event == 'leave') {\n          beforeFn = 'leave';\n          afterFn = 'afterLeave'; // TODO(matsko): get rid of this\n        } else {\n          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);\n          afterFn = event;\n        }\n\n        if (event !== 'enter' && event !== 'move') {\n          before = packageAnimations(element, event, options, animations, beforeFn);\n        }\n        after  = packageAnimations(element, event, options, animations, afterFn);\n      }\n\n      // no matching animations\n      if (!before && !after) return;\n\n      function applyOptions() {\n        options.domOperation();\n        applyAnimationClasses(element, options);\n      }\n\n      function close() {\n        animationClosed = true;\n        applyOptions();\n        applyAnimationStyles(element, options);\n      }\n\n      var runner;\n\n      return {\n        $$willAnimate: true,\n        end: function() {\n          if (runner) {\n            runner.end();\n          } else {\n            close();\n            runner = new $$AnimateRunner();\n            runner.complete(true);\n          }\n          return runner;\n        },\n        start: function() {\n          if (runner) {\n            return runner;\n          }\n\n          runner = new $$AnimateRunner();\n          var closeActiveAnimations;\n          var chain = [];\n\n          if (before) {\n            chain.push(function(fn) {\n              closeActiveAnimations = before(fn);\n            });\n          }\n\n          if (chain.length) {\n            chain.push(function(fn) {\n              applyOptions();\n              fn(true);\n            });\n          } else {\n            applyOptions();\n          }\n\n          if (after) {\n            chain.push(function(fn) {\n              closeActiveAnimations = after(fn);\n            });\n          }\n\n          runner.setHost({\n            end: function() {\n              endAnimations();\n            },\n            cancel: function() {\n              endAnimations(true);\n            }\n          });\n\n          $$AnimateRunner.chain(chain, onComplete);\n          return runner;\n\n          function onComplete(success) {\n            close(success);\n            runner.complete(success);\n          }\n\n          function endAnimations(cancelled) {\n            if (!animationClosed) {\n              (closeActiveAnimations || noop)(cancelled);\n              onComplete(cancelled);\n            }\n          }\n        }\n      };\n\n      function executeAnimationFn(fn, element, event, options, onDone) {\n        var args;\n        switch (event) {\n          case 'animate':\n            args = [element, options.from, options.to, onDone];\n            break;\n\n          case 'setClass':\n            args = [element, classesToAdd, classesToRemove, onDone];\n            break;\n\n          case 'addClass':\n            args = [element, classesToAdd, onDone];\n            break;\n\n          case 'removeClass':\n            args = [element, classesToRemove, onDone];\n            break;\n\n          default:\n            args = [element, onDone];\n            break;\n        }\n\n        args.push(options);\n\n        var value = fn.apply(fn, args);\n        if (value) {\n          if (isFunction(value.start)) {\n            value = value.start();\n          }\n\n          if (value instanceof $$AnimateRunner) {\n            value.done(onDone);\n          } else if (isFunction(value)) {\n            // optional onEnd / onCancel callback\n            return value;\n          }\n        }\n\n        return noop;\n      }\n\n      function groupEventedAnimations(element, event, options, animations, fnName) {\n        var operations = [];\n        forEach(animations, function(ani) {\n          var animation = ani[fnName];\n          if (!animation) return;\n\n          // note that all of these animations will run in parallel\n          operations.push(function() {\n            var runner;\n            var endProgressCb;\n\n            var resolved = false;\n            var onAnimationComplete = function(rejected) {\n              if (!resolved) {\n                resolved = true;\n                (endProgressCb || noop)(rejected);\n                runner.complete(!rejected);\n              }\n            };\n\n            runner = new $$AnimateRunner({\n              end: function() {\n                onAnimationComplete();\n              },\n              cancel: function() {\n                onAnimationComplete(true);\n              }\n            });\n\n            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {\n              var cancelled = result === false;\n              onAnimationComplete(cancelled);\n            });\n\n            return runner;\n          });\n        });\n\n        return operations;\n      }\n\n      function packageAnimations(element, event, options, animations, fnName) {\n        var operations = groupEventedAnimations(element, event, options, animations, fnName);\n        if (operations.length === 0) {\n          var a,b;\n          if (fnName === 'beforeSetClass') {\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');\n          } else if (fnName === 'setClass') {\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');\n          }\n\n          if (a) {\n            operations = operations.concat(a);\n          }\n          if (b) {\n            operations = operations.concat(b);\n          }\n        }\n\n        if (operations.length === 0) return;\n\n        // TODO(matsko): add documentation\n        return function startAnimation(callback) {\n          var runners = [];\n          if (operations.length) {\n            forEach(operations, function(animateFn) {\n              runners.push(animateFn());\n            });\n          }\n\n          runners.length ? $$AnimateRunner.all(runners, callback) : callback();\n\n          return function endFn(reject) {\n            forEach(runners, function(runner) {\n              reject ? runner.cancel() : runner.end();\n            });\n          };\n        };\n      }\n    };\n\n    function lookupAnimations(classes) {\n      classes = isArray(classes) ? classes : classes.split(' ');\n      var matches = [], flagMap = {};\n      for (var i=0; i < classes.length; i++) {\n        var klass = classes[i],\n            animationFactory = $animateProvider.$$registeredAnimations[klass];\n        if (animationFactory && !flagMap[klass]) {\n          matches.push($injector.get(animationFactory));\n          flagMap[klass] = true;\n        }\n      }\n      return matches;\n    }\n  }];\n}];\n\nvar $$AnimateJsDriverProvider = ['$$animationProvider', function($$animationProvider) {\n  $$animationProvider.drivers.push('$$animateJsDriver');\n  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {\n    return function initDriverFn(animationDetails) {\n      if (animationDetails.from && animationDetails.to) {\n        var fromAnimation = prepareAnimation(animationDetails.from);\n        var toAnimation = prepareAnimation(animationDetails.to);\n        if (!fromAnimation && !toAnimation) return;\n\n        return {\n          start: function() {\n            var animationRunners = [];\n\n            if (fromAnimation) {\n              animationRunners.push(fromAnimation.start());\n            }\n\n            if (toAnimation) {\n              animationRunners.push(toAnimation.start());\n            }\n\n            $$AnimateRunner.all(animationRunners, done);\n\n            var runner = new $$AnimateRunner({\n              end: endFnFactory(),\n              cancel: endFnFactory()\n            });\n\n            return runner;\n\n            function endFnFactory() {\n              return function() {\n                forEach(animationRunners, function(runner) {\n                  // at this point we cannot cancel animations for groups just yet. 1.5+\n                  runner.end();\n                });\n              };\n            }\n\n            function done(status) {\n              runner.complete(status);\n            }\n          }\n        };\n      } else {\n        return prepareAnimation(animationDetails);\n      }\n    };\n\n    function prepareAnimation(animationDetails) {\n      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations\n      var element = animationDetails.element;\n      var event = animationDetails.event;\n      var options = animationDetails.options;\n      var classes = animationDetails.classes;\n      return $$animateJs(element, event, classes, options);\n    }\n  }];\n}];\n\nvar NG_ANIMATE_ATTR_NAME = 'data-ng-animate';\nvar NG_ANIMATE_PIN_DATA = '$ngAnimatePin';\nvar $$AnimateQueueProvider = ['$animateProvider', function($animateProvider) {\n  var PRE_DIGEST_STATE = 1;\n  var RUNNING_STATE = 2;\n  var ONE_SPACE = ' ';\n\n  var rules = this.rules = {\n    skip: [],\n    cancel: [],\n    join: []\n  };\n\n  function makeTruthyCssClassMap(classString) {\n    if (!classString) {\n      return null;\n    }\n\n    var keys = classString.split(ONE_SPACE);\n    var map = Object.create(null);\n\n    forEach(keys, function(key) {\n      map[key] = true;\n    });\n    return map;\n  }\n\n  function hasMatchingClasses(newClassString, currentClassString) {\n    if (newClassString && currentClassString) {\n      var currentClassMap = makeTruthyCssClassMap(currentClassString);\n      return newClassString.split(ONE_SPACE).some(function(className) {\n        return currentClassMap[className];\n      });\n    }\n  }\n\n  function isAllowed(ruleType, element, currentAnimation, previousAnimation) {\n    return rules[ruleType].some(function(fn) {\n      return fn(element, currentAnimation, previousAnimation);\n    });\n  }\n\n  function hasAnimationClasses(animation, and) {\n    var a = (animation.addClass || '').length > 0;\n    var b = (animation.removeClass || '').length > 0;\n    return and ? a && b : a || b;\n  }\n\n  rules.join.push(function(element, newAnimation, currentAnimation) {\n    // if the new animation is class-based then we can just tack that on\n    return !newAnimation.structural && hasAnimationClasses(newAnimation);\n  });\n\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\n    // there is no need to animate anything if no classes are being added and\n    // there is no structural animation that will be triggered\n    return !newAnimation.structural && !hasAnimationClasses(newAnimation);\n  });\n\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\n    // why should we trigger a new structural animation if the element will\n    // be removed from the DOM anyway?\n    return currentAnimation.event == 'leave' && newAnimation.structural;\n  });\n\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\n    // if there is an ongoing current animation then don't even bother running the class-based animation\n    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;\n  });\n\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n    // there can never be two structural animations running at the same time\n    return currentAnimation.structural && newAnimation.structural;\n  });\n\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n    // if the previous animation is already running, but the new animation will\n    // be triggered, but the new animation is structural\n    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;\n  });\n\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n    var nA = newAnimation.addClass;\n    var nR = newAnimation.removeClass;\n    var cA = currentAnimation.addClass;\n    var cR = currentAnimation.removeClass;\n\n    // early detection to save the global CPU shortage :)\n    if ((isUndefined(nA) && isUndefined(nR)) || (isUndefined(cA) && isUndefined(cR))) {\n      return false;\n    }\n\n    return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);\n  });\n\n  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$HashMap',\n               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',\n       function($$rAF,   $rootScope,   $rootElement,   $document,   $$HashMap,\n                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow) {\n\n    var activeAnimationsLookup = new $$HashMap();\n    var disabledElementsLookup = new $$HashMap();\n    var animationsEnabled = null;\n\n    function postDigestTaskFactory() {\n      var postDigestCalled = false;\n      return function(fn) {\n        // we only issue a call to postDigest before\n        // it has first passed. This prevents any callbacks\n        // from not firing once the animation has completed\n        // since it will be out of the digest cycle.\n        if (postDigestCalled) {\n          fn();\n        } else {\n          $rootScope.$$postDigest(function() {\n            postDigestCalled = true;\n            fn();\n          });\n        }\n      };\n    }\n\n    // Wait until all directive and route-related templates are downloaded and\n    // compiled. The $templateRequest.totalPendingRequests variable keeps track of\n    // all of the remote templates being currently downloaded. If there are no\n    // templates currently downloading then the watcher will still fire anyway.\n    var deregisterWatch = $rootScope.$watch(\n      function() { return $templateRequest.totalPendingRequests === 0; },\n      function(isEmpty) {\n        if (!isEmpty) return;\n        deregisterWatch();\n\n        // Now that all templates have been downloaded, $animate will wait until\n        // the post digest queue is empty before enabling animations. By having two\n        // calls to $postDigest calls we can ensure that the flag is enabled at the\n        // very end of the post digest queue. Since all of the animations in $animate\n        // use $postDigest, it's important that the code below executes at the end.\n        // This basically means that the page is fully downloaded and compiled before\n        // any animations are triggered.\n        $rootScope.$$postDigest(function() {\n          $rootScope.$$postDigest(function() {\n            // we check for null directly in the event that the application already called\n            // .enabled() with whatever arguments that it provided it with\n            if (animationsEnabled === null) {\n              animationsEnabled = true;\n            }\n          });\n        });\n      }\n    );\n\n    var callbackRegistry = {};\n\n    // remember that the classNameFilter is set during the provider/config\n    // stage therefore we can optimize here and setup a helper function\n    var classNameFilter = $animateProvider.classNameFilter();\n    var isAnimatableClassName = !classNameFilter\n              ? function() { return true; }\n              : function(className) {\n                return classNameFilter.test(className);\n              };\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    function normalizeAnimationDetails(element, animation) {\n      return mergeAnimationDetails(element, animation, {});\n    }\n\n    // IE9-11 has no method \"contains\" in SVG element and in Node.prototype. Bug #10259.\n    var contains = Node.prototype.contains || function(arg) {\n      // jshint bitwise: false\n      return this === arg || !!(this.compareDocumentPosition(arg) & 16);\n      // jshint bitwise: true\n    };\n\n    function findCallbacks(parent, element, event) {\n      var targetNode = getDomNode(element);\n      var targetParentNode = getDomNode(parent);\n\n      var matches = [];\n      var entries = callbackRegistry[event];\n      if (entries) {\n        forEach(entries, function(entry) {\n          if (contains.call(entry.node, targetNode)) {\n            matches.push(entry.callback);\n          } else if (event === 'leave' && contains.call(entry.node, targetParentNode)) {\n            matches.push(entry.callback);\n          }\n        });\n      }\n\n      return matches;\n    }\n\n    return {\n      on: function(event, container, callback) {\n        var node = extractElementNode(container);\n        callbackRegistry[event] = callbackRegistry[event] || [];\n        callbackRegistry[event].push({\n          node: node,\n          callback: callback\n        });\n      },\n\n      off: function(event, container, callback) {\n        var entries = callbackRegistry[event];\n        if (!entries) return;\n\n        callbackRegistry[event] = arguments.length === 1\n            ? null\n            : filterFromRegistry(entries, container, callback);\n\n        function filterFromRegistry(list, matchContainer, matchCallback) {\n          var containerNode = extractElementNode(matchContainer);\n          return list.filter(function(entry) {\n            var isMatch = entry.node === containerNode &&\n                            (!matchCallback || entry.callback === matchCallback);\n            return !isMatch;\n          });\n        }\n      },\n\n      pin: function(element, parentElement) {\n        assertArg(isElement(element), 'element', 'not an element');\n        assertArg(isElement(parentElement), 'parentElement', 'not an element');\n        element.data(NG_ANIMATE_PIN_DATA, parentElement);\n      },\n\n      push: function(element, event, options, domOperation) {\n        options = options || {};\n        options.domOperation = domOperation;\n        return queueAnimation(element, event, options);\n      },\n\n      // this method has four signatures:\n      //  () - global getter\n      //  (bool) - global setter\n      //  (element) - element getter\n      //  (element, bool) - element setter<F37>\n      enabled: function(element, bool) {\n        var argCount = arguments.length;\n\n        if (argCount === 0) {\n          // () - Global getter\n          bool = !!animationsEnabled;\n        } else {\n          var hasElement = isElement(element);\n\n          if (!hasElement) {\n            // (bool) - Global setter\n            bool = animationsEnabled = !!element;\n          } else {\n            var node = getDomNode(element);\n            var recordExists = disabledElementsLookup.get(node);\n\n            if (argCount === 1) {\n              // (element) - Element getter\n              bool = !recordExists;\n            } else {\n              // (element, bool) - Element setter\n              disabledElementsLookup.put(node, !bool);\n            }\n          }\n        }\n\n        return bool;\n      }\n    };\n\n    function queueAnimation(element, event, initialOptions) {\n      // we always make a copy of the options since\n      // there should never be any side effects on\n      // the input data when running `$animateCss`.\n      var options = copy(initialOptions);\n\n      var node, parent;\n      element = stripCommentsFromElement(element);\n      if (element) {\n        node = getDomNode(element);\n        parent = element.parent();\n      }\n\n      options = prepareAnimationOptions(options);\n\n      // we create a fake runner with a working promise.\n      // These methods will become available after the digest has passed\n      var runner = new $$AnimateRunner();\n\n      // this is used to trigger callbacks in postDigest mode\n      var runInNextPostDigestOrNow = postDigestTaskFactory();\n\n      if (isArray(options.addClass)) {\n        options.addClass = options.addClass.join(' ');\n      }\n\n      if (options.addClass && !isString(options.addClass)) {\n        options.addClass = null;\n      }\n\n      if (isArray(options.removeClass)) {\n        options.removeClass = options.removeClass.join(' ');\n      }\n\n      if (options.removeClass && !isString(options.removeClass)) {\n        options.removeClass = null;\n      }\n\n      if (options.from && !isObject(options.from)) {\n        options.from = null;\n      }\n\n      if (options.to && !isObject(options.to)) {\n        options.to = null;\n      }\n\n      // there are situations where a directive issues an animation for\n      // a jqLite wrapper that contains only comment nodes... If this\n      // happens then there is no way we can perform an animation\n      if (!node) {\n        close();\n        return runner;\n      }\n\n      var className = [node.className, options.addClass, options.removeClass].join(' ');\n      if (!isAnimatableClassName(className)) {\n        close();\n        return runner;\n      }\n\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\n\n      // this is a hard disable of all animations for the application or on\n      // the element itself, therefore  there is no need to continue further\n      // past this point if not enabled\n      // Animations are also disabled if the document is currently hidden (page is not visible\n      // to the user), because browsers slow down or do not flush calls to requestAnimationFrame\n      var skipAnimations = !animationsEnabled || $document[0].hidden || disabledElementsLookup.get(node);\n      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};\n      var hasExistingAnimation = !!existingAnimation.state;\n\n      // there is no point in traversing the same collection of parent ancestors if a followup\n      // animation will be run on the same element that already did all that checking work\n      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state != PRE_DIGEST_STATE)) {\n        skipAnimations = !areAnimationsAllowed(element, parent, event);\n      }\n\n      if (skipAnimations) {\n        close();\n        return runner;\n      }\n\n      if (isStructural) {\n        closeChildAnimations(element);\n      }\n\n      var newAnimation = {\n        structural: isStructural,\n        element: element,\n        event: event,\n        addClass: options.addClass,\n        removeClass: options.removeClass,\n        close: close,\n        options: options,\n        runner: runner\n      };\n\n      if (hasExistingAnimation) {\n        var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);\n        if (skipAnimationFlag) {\n          if (existingAnimation.state === RUNNING_STATE) {\n            close();\n            return runner;\n          } else {\n            mergeAnimationDetails(element, existingAnimation, newAnimation);\n            return existingAnimation.runner;\n          }\n        }\n        var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);\n        if (cancelAnimationFlag) {\n          if (existingAnimation.state === RUNNING_STATE) {\n            // this will end the animation right away and it is safe\n            // to do so since the animation is already running and the\n            // runner callback code will run in async\n            existingAnimation.runner.end();\n          } else if (existingAnimation.structural) {\n            // this means that the animation is queued into a digest, but\n            // hasn't started yet. Therefore it is safe to run the close\n            // method which will call the runner methods in async.\n            existingAnimation.close();\n          } else {\n            // this will merge the new animation options into existing animation options\n            mergeAnimationDetails(element, existingAnimation, newAnimation);\n\n            return existingAnimation.runner;\n          }\n        } else {\n          // a joined animation means that this animation will take over the existing one\n          // so an example would involve a leave animation taking over an enter. Then when\n          // the postDigest kicks in the enter will be ignored.\n          var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);\n          if (joinAnimationFlag) {\n            if (existingAnimation.state === RUNNING_STATE) {\n              normalizeAnimationDetails(element, newAnimation);\n            } else {\n              applyGeneratedPreparationClasses(element, isStructural ? event : null, options);\n\n              event = newAnimation.event = existingAnimation.event;\n              options = mergeAnimationDetails(element, existingAnimation, newAnimation);\n\n              //we return the same runner since only the option values of this animation will\n              //be fed into the `existingAnimation`.\n              return existingAnimation.runner;\n            }\n          }\n        }\n      } else {\n        // normalization in this case means that it removes redundant CSS classes that\n        // already exist (addClass) or do not exist (removeClass) on the element\n        normalizeAnimationDetails(element, newAnimation);\n      }\n\n      // when the options are merged and cleaned up we may end up not having to do\n      // an animation at all, therefore we should check this before issuing a post\n      // digest callback. Structural animations will always run no matter what.\n      var isValidAnimation = newAnimation.structural;\n      if (!isValidAnimation) {\n        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present\n        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)\n                            || hasAnimationClasses(newAnimation);\n      }\n\n      if (!isValidAnimation) {\n        close();\n        clearElementAnimationState(element);\n        return runner;\n      }\n\n      // the counter keeps track of cancelled animations\n      var counter = (existingAnimation.counter || 0) + 1;\n      newAnimation.counter = counter;\n\n      markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);\n\n      $rootScope.$$postDigest(function() {\n        var animationDetails = activeAnimationsLookup.get(node);\n        var animationCancelled = !animationDetails;\n        animationDetails = animationDetails || {};\n\n        // if addClass/removeClass is called before something like enter then the\n        // registered parent element may not be present. The code below will ensure\n        // that a final value for parent element is obtained\n        var parentElement = element.parent() || [];\n\n        // animate/structural/class-based animations all have requirements. Otherwise there\n        // is no point in performing an animation. The parent node must also be set.\n        var isValidAnimation = parentElement.length > 0\n                                && (animationDetails.event === 'animate'\n                                    || animationDetails.structural\n                                    || hasAnimationClasses(animationDetails));\n\n        // this means that the previous animation was cancelled\n        // even if the follow-up animation is the same event\n        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {\n          // if another animation did not take over then we need\n          // to make sure that the domOperation and options are\n          // handled accordingly\n          if (animationCancelled) {\n            applyAnimationClasses(element, options);\n            applyAnimationStyles(element, options);\n          }\n\n          // if the event changed from something like enter to leave then we do\n          // it, otherwise if it's the same then the end result will be the same too\n          if (animationCancelled || (isStructural && animationDetails.event !== event)) {\n            options.domOperation();\n            runner.end();\n          }\n\n          // in the event that the element animation was not cancelled or a follow-up animation\n          // isn't allowed to animate from here then we need to clear the state of the element\n          // so that any future animations won't read the expired animation data.\n          if (!isValidAnimation) {\n            clearElementAnimationState(element);\n          }\n\n          return;\n        }\n\n        // this combined multiple class to addClass / removeClass into a setClass event\n        // so long as a structural event did not take over the animation\n        event = !animationDetails.structural && hasAnimationClasses(animationDetails, true)\n            ? 'setClass'\n            : animationDetails.event;\n\n        markElementAnimationState(element, RUNNING_STATE);\n        var realRunner = $$animation(element, event, animationDetails.options);\n\n        realRunner.done(function(status) {\n          close(!status);\n          var animationDetails = activeAnimationsLookup.get(node);\n          if (animationDetails && animationDetails.counter === counter) {\n            clearElementAnimationState(getDomNode(element));\n          }\n          notifyProgress(runner, event, 'close', {});\n        });\n\n        // this will update the runner's flow-control events based on\n        // the `realRunner` object.\n        runner.setHost(realRunner);\n        notifyProgress(runner, event, 'start', {});\n      });\n\n      return runner;\n\n      function notifyProgress(runner, event, phase, data) {\n        runInNextPostDigestOrNow(function() {\n          var callbacks = findCallbacks(parent, element, event);\n          if (callbacks.length) {\n            // do not optimize this call here to RAF because\n            // we don't know how heavy the callback code here will\n            // be and if this code is buffered then this can\n            // lead to a performance regression.\n            $$rAF(function() {\n              forEach(callbacks, function(callback) {\n                callback(element, phase, data);\n              });\n            });\n          }\n        });\n        runner.progress(event, phase, data);\n      }\n\n      function close(reject) { // jshint ignore:line\n        clearGeneratedClasses(element, options);\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n        options.domOperation();\n        runner.complete(!reject);\n      }\n    }\n\n    function closeChildAnimations(element) {\n      var node = getDomNode(element);\n      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');\n      forEach(children, function(child) {\n        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME));\n        var animationDetails = activeAnimationsLookup.get(child);\n        if (animationDetails) {\n          switch (state) {\n            case RUNNING_STATE:\n              animationDetails.runner.end();\n              /* falls through */\n            case PRE_DIGEST_STATE:\n              activeAnimationsLookup.remove(child);\n              break;\n          }\n        }\n      });\n    }\n\n    function clearElementAnimationState(element) {\n      var node = getDomNode(element);\n      node.removeAttribute(NG_ANIMATE_ATTR_NAME);\n      activeAnimationsLookup.remove(node);\n    }\n\n    function isMatchingElement(nodeOrElmA, nodeOrElmB) {\n      return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);\n    }\n\n    /**\n     * This fn returns false if any of the following is true:\n     * a) animations on any parent element are disabled, and animations on the element aren't explicitly allowed\n     * b) a parent element has an ongoing structural animation, and animateChildren is false\n     * c) the element is not a child of the body\n     * d) the element is not a child of the $rootElement\n     */\n    function areAnimationsAllowed(element, parentElement, event) {\n      var bodyElement = jqLite($document[0].body);\n      var bodyElementDetected = isMatchingElement(element, bodyElement) || element[0].nodeName === 'HTML';\n      var rootElementDetected = isMatchingElement(element, $rootElement);\n      var parentAnimationDetected = false;\n      var animateChildren;\n      var elementDisabled = disabledElementsLookup.get(getDomNode(element));\n\n      var parentHost = element.data(NG_ANIMATE_PIN_DATA);\n      if (parentHost) {\n        parentElement = parentHost;\n      }\n\n      while (parentElement && parentElement.length) {\n        if (!rootElementDetected) {\n          // angular doesn't want to attempt to animate elements outside of the application\n          // therefore we need to ensure that the rootElement is an ancestor of the current element\n          rootElementDetected = isMatchingElement(parentElement, $rootElement);\n        }\n\n        var parentNode = parentElement[0];\n        if (parentNode.nodeType !== ELEMENT_NODE) {\n          // no point in inspecting the #document element\n          break;\n        }\n\n        var details = activeAnimationsLookup.get(parentNode) || {};\n        // either an enter, leave or move animation will commence\n        // therefore we can't allow any animations to take place\n        // but if a parent animation is class-based then that's ok\n        if (!parentAnimationDetected) {\n          var parentElementDisabled = disabledElementsLookup.get(parentNode);\n\n          if (parentElementDisabled === true && elementDisabled !== false) {\n            // disable animations if the user hasn't explicitly enabled animations on the\n            // current element\n            elementDisabled = true;\n            // element is disabled via parent element, no need to check anything else\n            break;\n          } else if (parentElementDisabled === false) {\n            elementDisabled = false;\n          }\n          parentAnimationDetected = details.structural;\n        }\n\n        if (isUndefined(animateChildren) || animateChildren === true) {\n          var value = parentElement.data(NG_ANIMATE_CHILDREN_DATA);\n          if (isDefined(value)) {\n            animateChildren = value;\n          }\n        }\n\n        // there is no need to continue traversing at this point\n        if (parentAnimationDetected && animateChildren === false) break;\n\n        if (!bodyElementDetected) {\n          // we also need to ensure that the element is or will be a part of the body element\n          // otherwise it is pointless to even issue an animation to be rendered\n          bodyElementDetected = isMatchingElement(parentElement, bodyElement);\n        }\n\n        if (bodyElementDetected && rootElementDetected) {\n          // If both body and root have been found, any other checks are pointless,\n          // as no animation data should live outside the application\n          break;\n        }\n\n        if (!rootElementDetected) {\n          // If no rootElement is detected, check if the parentElement is pinned to another element\n          parentHost = parentElement.data(NG_ANIMATE_PIN_DATA);\n          if (parentHost) {\n            // The pin target element becomes the next parent element\n            parentElement = parentHost;\n            continue;\n          }\n        }\n\n        parentElement = parentElement.parent();\n      }\n\n      var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;\n      return allowAnimation && rootElementDetected && bodyElementDetected;\n    }\n\n    function markElementAnimationState(element, state, details) {\n      details = details || {};\n      details.state = state;\n\n      var node = getDomNode(element);\n      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);\n\n      var oldValue = activeAnimationsLookup.get(node);\n      var newValue = oldValue\n          ? extend(oldValue, details)\n          : details;\n      activeAnimationsLookup.put(node, newValue);\n    }\n  }];\n}];\n\nvar $$AnimationProvider = ['$animateProvider', function($animateProvider) {\n  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';\n\n  var drivers = this.drivers = [];\n\n  var RUNNER_STORAGE_KEY = '$$animationRunner';\n\n  function setRunner(element, runner) {\n    element.data(RUNNER_STORAGE_KEY, runner);\n  }\n\n  function removeRunner(element) {\n    element.removeData(RUNNER_STORAGE_KEY);\n  }\n\n  function getRunner(element) {\n    return element.data(RUNNER_STORAGE_KEY);\n  }\n\n  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$HashMap', '$$rAFScheduler',\n       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$HashMap,   $$rAFScheduler) {\n\n    var animationQueue = [];\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    function sortAnimations(animations) {\n      var tree = { children: [] };\n      var i, lookup = new $$HashMap();\n\n      // this is done first beforehand so that the hashmap\n      // is filled with a list of the elements that will be animated\n      for (i = 0; i < animations.length; i++) {\n        var animation = animations[i];\n        lookup.put(animation.domNode, animations[i] = {\n          domNode: animation.domNode,\n          fn: animation.fn,\n          children: []\n        });\n      }\n\n      for (i = 0; i < animations.length; i++) {\n        processNode(animations[i]);\n      }\n\n      return flatten(tree);\n\n      function processNode(entry) {\n        if (entry.processed) return entry;\n        entry.processed = true;\n\n        var elementNode = entry.domNode;\n        var parentNode = elementNode.parentNode;\n        lookup.put(elementNode, entry);\n\n        var parentEntry;\n        while (parentNode) {\n          parentEntry = lookup.get(parentNode);\n          if (parentEntry) {\n            if (!parentEntry.processed) {\n              parentEntry = processNode(parentEntry);\n            }\n            break;\n          }\n          parentNode = parentNode.parentNode;\n        }\n\n        (parentEntry || tree).children.push(entry);\n        return entry;\n      }\n\n      function flatten(tree) {\n        var result = [];\n        var queue = [];\n        var i;\n\n        for (i = 0; i < tree.children.length; i++) {\n          queue.push(tree.children[i]);\n        }\n\n        var remainingLevelEntries = queue.length;\n        var nextLevelEntries = 0;\n        var row = [];\n\n        for (i = 0; i < queue.length; i++) {\n          var entry = queue[i];\n          if (remainingLevelEntries <= 0) {\n            remainingLevelEntries = nextLevelEntries;\n            nextLevelEntries = 0;\n            result.push(row);\n            row = [];\n          }\n          row.push(entry.fn);\n          entry.children.forEach(function(childEntry) {\n            nextLevelEntries++;\n            queue.push(childEntry);\n          });\n          remainingLevelEntries--;\n        }\n\n        if (row.length) {\n          result.push(row);\n        }\n\n        return result;\n      }\n    }\n\n    // TODO(matsko): document the signature in a better way\n    return function(element, event, options) {\n      options = prepareAnimationOptions(options);\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\n\n      // there is no animation at the current moment, however\n      // these runner methods will get later updated with the\n      // methods leading into the driver's end/cancel methods\n      // for now they just stop the animation from starting\n      var runner = new $$AnimateRunner({\n        end: function() { close(); },\n        cancel: function() { close(true); }\n      });\n\n      if (!drivers.length) {\n        close();\n        return runner;\n      }\n\n      setRunner(element, runner);\n\n      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));\n      var tempClasses = options.tempClasses;\n      if (tempClasses) {\n        classes += ' ' + tempClasses;\n        options.tempClasses = null;\n      }\n\n      var prepareClassName;\n      if (isStructural) {\n        prepareClassName = 'ng-' + event + PREPARE_CLASS_SUFFIX;\n        $$jqLite.addClass(element, prepareClassName);\n      }\n\n      animationQueue.push({\n        // this data is used by the postDigest code and passed into\n        // the driver step function\n        element: element,\n        classes: classes,\n        event: event,\n        structural: isStructural,\n        options: options,\n        beforeStart: beforeStart,\n        close: close\n      });\n\n      element.on('$destroy', handleDestroyedElement);\n\n      // we only want there to be one function called within the post digest\n      // block. This way we can group animations for all the animations that\n      // were apart of the same postDigest flush call.\n      if (animationQueue.length > 1) return runner;\n\n      $rootScope.$$postDigest(function() {\n        var animations = [];\n        forEach(animationQueue, function(entry) {\n          // the element was destroyed early on which removed the runner\n          // form its storage. This means we can't animate this element\n          // at all and it already has been closed due to destruction.\n          if (getRunner(entry.element)) {\n            animations.push(entry);\n          } else {\n            entry.close();\n          }\n        });\n\n        // now any future animations will be in another postDigest\n        animationQueue.length = 0;\n\n        var groupedAnimations = groupAnimations(animations);\n        var toBeSortedAnimations = [];\n\n        forEach(groupedAnimations, function(animationEntry) {\n          toBeSortedAnimations.push({\n            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),\n            fn: function triggerAnimationStart() {\n              // it's important that we apply the `ng-animate` CSS class and the\n              // temporary classes before we do any driver invoking since these\n              // CSS classes may be required for proper CSS detection.\n              animationEntry.beforeStart();\n\n              var startAnimationFn, closeFn = animationEntry.close;\n\n              // in the event that the element was removed before the digest runs or\n              // during the RAF sequencing then we should not trigger the animation.\n              var targetElement = animationEntry.anchors\n                  ? (animationEntry.from.element || animationEntry.to.element)\n                  : animationEntry.element;\n\n              if (getRunner(targetElement)) {\n                var operation = invokeFirstDriver(animationEntry);\n                if (operation) {\n                  startAnimationFn = operation.start;\n                }\n              }\n\n              if (!startAnimationFn) {\n                closeFn();\n              } else {\n                var animationRunner = startAnimationFn();\n                animationRunner.done(function(status) {\n                  closeFn(!status);\n                });\n                updateAnimationRunners(animationEntry, animationRunner);\n              }\n            }\n          });\n        });\n\n        // we need to sort each of the animations in order of parent to child\n        // relationships. This ensures that the child classes are applied at the\n        // right time.\n        $$rAFScheduler(sortAnimations(toBeSortedAnimations));\n      });\n\n      return runner;\n\n      // TODO(matsko): change to reference nodes\n      function getAnchorNodes(node) {\n        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';\n        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)\n              ? [node]\n              : node.querySelectorAll(SELECTOR);\n        var anchors = [];\n        forEach(items, function(node) {\n          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);\n          if (attr && attr.length) {\n            anchors.push(node);\n          }\n        });\n        return anchors;\n      }\n\n      function groupAnimations(animations) {\n        var preparedAnimations = [];\n        var refLookup = {};\n        forEach(animations, function(animation, index) {\n          var element = animation.element;\n          var node = getDomNode(element);\n          var event = animation.event;\n          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;\n          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];\n\n          if (anchorNodes.length) {\n            var direction = enterOrMove ? 'to' : 'from';\n\n            forEach(anchorNodes, function(anchor) {\n              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);\n              refLookup[key] = refLookup[key] || {};\n              refLookup[key][direction] = {\n                animationID: index,\n                element: jqLite(anchor)\n              };\n            });\n          } else {\n            preparedAnimations.push(animation);\n          }\n        });\n\n        var usedIndicesLookup = {};\n        var anchorGroups = {};\n        forEach(refLookup, function(operations, key) {\n          var from = operations.from;\n          var to = operations.to;\n\n          if (!from || !to) {\n            // only one of these is set therefore we can't have an\n            // anchor animation since all three pieces are required\n            var index = from ? from.animationID : to.animationID;\n            var indexKey = index.toString();\n            if (!usedIndicesLookup[indexKey]) {\n              usedIndicesLookup[indexKey] = true;\n              preparedAnimations.push(animations[index]);\n            }\n            return;\n          }\n\n          var fromAnimation = animations[from.animationID];\n          var toAnimation = animations[to.animationID];\n          var lookupKey = from.animationID.toString();\n          if (!anchorGroups[lookupKey]) {\n            var group = anchorGroups[lookupKey] = {\n              structural: true,\n              beforeStart: function() {\n                fromAnimation.beforeStart();\n                toAnimation.beforeStart();\n              },\n              close: function() {\n                fromAnimation.close();\n                toAnimation.close();\n              },\n              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),\n              from: fromAnimation,\n              to: toAnimation,\n              anchors: [] // TODO(matsko): change to reference nodes\n            };\n\n            // the anchor animations require that the from and to elements both have at least\n            // one shared CSS class which effectively marries the two elements together to use\n            // the same animation driver and to properly sequence the anchor animation.\n            if (group.classes.length) {\n              preparedAnimations.push(group);\n            } else {\n              preparedAnimations.push(fromAnimation);\n              preparedAnimations.push(toAnimation);\n            }\n          }\n\n          anchorGroups[lookupKey].anchors.push({\n            'out': from.element, 'in': to.element\n          });\n        });\n\n        return preparedAnimations;\n      }\n\n      function cssClassesIntersection(a,b) {\n        a = a.split(' ');\n        b = b.split(' ');\n        var matches = [];\n\n        for (var i = 0; i < a.length; i++) {\n          var aa = a[i];\n          if (aa.substring(0,3) === 'ng-') continue;\n\n          for (var j = 0; j < b.length; j++) {\n            if (aa === b[j]) {\n              matches.push(aa);\n              break;\n            }\n          }\n        }\n\n        return matches.join(' ');\n      }\n\n      function invokeFirstDriver(animationDetails) {\n        // we loop in reverse order since the more general drivers (like CSS and JS)\n        // may attempt more elements, but custom drivers are more particular\n        for (var i = drivers.length - 1; i >= 0; i--) {\n          var driverName = drivers[i];\n          if (!$injector.has(driverName)) continue; // TODO(matsko): remove this check\n\n          var factory = $injector.get(driverName);\n          var driver = factory(animationDetails);\n          if (driver) {\n            return driver;\n          }\n        }\n      }\n\n      function beforeStart() {\n        element.addClass(NG_ANIMATE_CLASSNAME);\n        if (tempClasses) {\n          $$jqLite.addClass(element, tempClasses);\n        }\n        if (prepareClassName) {\n          $$jqLite.removeClass(element, prepareClassName);\n          prepareClassName = null;\n        }\n      }\n\n      function updateAnimationRunners(animation, newRunner) {\n        if (animation.from && animation.to) {\n          update(animation.from.element);\n          update(animation.to.element);\n        } else {\n          update(animation.element);\n        }\n\n        function update(element) {\n          getRunner(element).setHost(newRunner);\n        }\n      }\n\n      function handleDestroyedElement() {\n        var runner = getRunner(element);\n        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {\n          runner.end();\n        }\n      }\n\n      function close(rejected) { // jshint ignore:line\n        element.off('$destroy', handleDestroyedElement);\n        removeRunner(element);\n\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n        options.domOperation();\n\n        if (tempClasses) {\n          $$jqLite.removeClass(element, tempClasses);\n        }\n\n        element.removeClass(NG_ANIMATE_CLASSNAME);\n        runner.complete(!rejected);\n      }\n    };\n  }];\n}];\n\n/**\n * @ngdoc directive\n * @name ngAnimateSwap\n * @restrict A\n * @scope\n *\n * @description\n *\n * ngAnimateSwap is a animation-oriented directive that allows for the container to\n * be removed and entered in whenever the associated expression changes. A\n * common usecase for this directive is a rotating banner component which\n * contains one image being present at a time. When the active image changes\n * then the old image will perform a `leave` animation and the new element\n * will be inserted via an `enter` animation.\n *\n * @example\n * <example name=\"ngAnimateSwap-directive\" module=\"ngAnimateSwapExample\"\n *          deps=\"angular-animate.js\"\n *          animations=\"true\" fixBase=\"true\">\n *   <file name=\"index.html\">\n *     <div class=\"container\" ng-controller=\"AppCtrl\">\n *       <div ng-animate-swap=\"number\" class=\"cell swap-animation\" ng-class=\"colorClass(number)\">\n *         {{ number }}\n *       </div>\n *     </div>\n *   </file>\n *   <file name=\"script.js\">\n *     angular.module('ngAnimateSwapExample', ['ngAnimate'])\n *       .controller('AppCtrl', ['$scope', '$interval', function($scope, $interval) {\n *         $scope.number = 0;\n *         $interval(function() {\n *           $scope.number++;\n *         }, 1000);\n *\n *         var colors = ['red','blue','green','yellow','orange'];\n *         $scope.colorClass = function(number) {\n *           return colors[number % colors.length];\n *         };\n *       }]);\n *   </file>\n *  <file name=\"animations.css\">\n *  .container {\n *    height:250px;\n *    width:250px;\n *    position:relative;\n *    overflow:hidden;\n *    border:2px solid black;\n *  }\n *  .container .cell {\n *    font-size:150px;\n *    text-align:center;\n *    line-height:250px;\n *    position:absolute;\n *    top:0;\n *    left:0;\n *    right:0;\n *    border-bottom:2px solid black;\n *  }\n *  .swap-animation.ng-enter, .swap-animation.ng-leave {\n *    transition:0.5s linear all;\n *  }\n *  .swap-animation.ng-enter {\n *    top:-250px;\n *  }\n *  .swap-animation.ng-enter-active {\n *    top:0px;\n *  }\n *  .swap-animation.ng-leave {\n *    top:0px;\n *  }\n *  .swap-animation.ng-leave-active {\n *    top:250px;\n *  }\n *  .red { background:red; }\n *  .green { background:green; }\n *  .blue { background:blue; }\n *  .yellow { background:yellow; }\n *  .orange { background:orange; }\n *  </file>\n * </example>\n */\nvar ngAnimateSwapDirective = ['$animate', '$rootScope', function($animate, $rootScope) {\n  return {\n    restrict: 'A',\n    transclude: 'element',\n    terminal: true,\n    priority: 600, // we use 600 here to ensure that the directive is caught before others\n    link: function(scope, $element, attrs, ctrl, $transclude) {\n      var previousElement, previousScope;\n      scope.$watchCollection(attrs.ngAnimateSwap || attrs['for'], function(value) {\n        if (previousElement) {\n          $animate.leave(previousElement);\n        }\n        if (previousScope) {\n          previousScope.$destroy();\n          previousScope = null;\n        }\n        if (value || value === 0) {\n          previousScope = scope.$new();\n          $transclude(previousScope, function(element) {\n            previousElement = element;\n            $animate.enter(element, null, $element);\n          });\n        }\n      });\n    }\n  };\n}];\n\n/* global angularAnimateModule: true,\n\n   ngAnimateSwapDirective,\n   $$AnimateAsyncRunFactory,\n   $$rAFSchedulerFactory,\n   $$AnimateChildrenDirective,\n   $$AnimateQueueProvider,\n   $$AnimationProvider,\n   $AnimateCssProvider,\n   $$AnimateCssDriverProvider,\n   $$AnimateJsProvider,\n   $$AnimateJsDriverProvider,\n*/\n\n/**\n * @ngdoc module\n * @name ngAnimate\n * @description\n *\n * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via\n * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.\n *\n * <div doc-module-components=\"ngAnimate\"></div>\n *\n * # Usage\n * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based\n * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For\n * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within\n * the HTML element that the animation will be triggered on.\n *\n * ## Directive Support\n * The following directives are \"animation aware\":\n *\n * | Directive                                                                                                | Supported Animations                                                     |\n * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|\n * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |\n * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |\n * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |\n * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |\n * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |\n * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |\n * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |\n * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |\n * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |\n * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |\n *\n * (More information can be found by visiting each the documentation associated with each directive.)\n *\n * ## CSS-based Animations\n *\n * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML\n * and CSS code we can create an animation that will be picked up by Angular when an the underlying directive performs an operation.\n *\n * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:\n *\n * ```html\n * <div ng-if=\"bool\" class=\"fade\">\n *    Fade me in out\n * </div>\n * <button ng-click=\"bool=true\">Fade In!</button>\n * <button ng-click=\"bool=false\">Fade Out!</button>\n * ```\n *\n * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:\n *\n * ```css\n * /&#42; The starting CSS styles for the enter animation &#42;/\n * .fade.ng-enter {\n *   transition:0.5s linear all;\n *   opacity:0;\n * }\n *\n * /&#42; The finishing CSS styles for the enter animation &#42;/\n * .fade.ng-enter.ng-enter-active {\n *   opacity:1;\n * }\n * ```\n *\n * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two\n * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition\n * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.\n *\n * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:\n *\n * ```css\n * /&#42; now the element will fade out before it is removed from the DOM &#42;/\n * .fade.ng-leave {\n *   transition:0.5s linear all;\n *   opacity:1;\n * }\n * .fade.ng-leave.ng-leave-active {\n *   opacity:0;\n * }\n * ```\n *\n * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:\n *\n * ```css\n * /&#42; there is no need to define anything inside of the destination\n * CSS class since the keyframe will take charge of the animation &#42;/\n * .fade.ng-leave {\n *   animation: my_fade_animation 0.5s linear;\n *   -webkit-animation: my_fade_animation 0.5s linear;\n * }\n *\n * @keyframes my_fade_animation {\n *   from { opacity:1; }\n *   to { opacity:0; }\n * }\n *\n * @-webkit-keyframes my_fade_animation {\n *   from { opacity:1; }\n *   to { opacity:0; }\n * }\n * ```\n *\n * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.\n *\n * ### CSS Class-based Animations\n *\n * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different\n * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added\n * and removed.\n *\n * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:\n *\n * ```html\n * <div ng-show=\"bool\" class=\"fade\">\n *   Show and hide me\n * </div>\n * <button ng-click=\"bool=true\">Toggle</button>\n *\n * <style>\n * .fade.ng-hide {\n *   transition:0.5s linear all;\n *   opacity:0;\n * }\n * </style>\n * ```\n *\n * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since\n * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.\n *\n * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation\n * with CSS styles.\n *\n * ```html\n * <div ng-class=\"{on:onOff}\" class=\"highlight\">\n *   Highlight this box\n * </div>\n * <button ng-click=\"onOff=!onOff\">Toggle</button>\n *\n * <style>\n * .highlight {\n *   transition:0.5s linear all;\n * }\n * .highlight.on-add {\n *   background:white;\n * }\n * .highlight.on {\n *   background:yellow;\n * }\n * .highlight.on-remove {\n *   background:black;\n * }\n * </style>\n * ```\n *\n * We can also make use of CSS keyframes by placing them within the CSS classes.\n *\n *\n * ### CSS Staggering Animations\n * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a\n * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be\n * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for\n * the animation. The style property expected within the stagger class can either be a **transition-delay** or an\n * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).\n *\n * ```css\n * .my-animation.ng-enter {\n *   /&#42; standard transition code &#42;/\n *   transition: 1s linear all;\n *   opacity:0;\n * }\n * .my-animation.ng-enter-stagger {\n *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/\n *   transition-delay: 0.1s;\n *\n *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate\n *     to not accidentally inherit a delay property from another CSS class &#42;/\n *   transition-duration: 0s;\n * }\n * .my-animation.ng-enter.ng-enter-active {\n *   /&#42; standard transition styles &#42;/\n *   opacity:1;\n * }\n * ```\n *\n * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations\n * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this\n * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation\n * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.\n *\n * The following code will issue the **ng-leave-stagger** event on the element provided:\n *\n * ```js\n * var kids = parent.children();\n *\n * $animate.leave(kids[0]); //stagger index=0\n * $animate.leave(kids[1]); //stagger index=1\n * $animate.leave(kids[2]); //stagger index=2\n * $animate.leave(kids[3]); //stagger index=3\n * $animate.leave(kids[4]); //stagger index=4\n *\n * window.requestAnimationFrame(function() {\n *   //stagger has reset itself\n *   $animate.leave(kids[5]); //stagger index=0\n *   $animate.leave(kids[6]); //stagger index=1\n *\n *   $scope.$digest();\n * });\n * ```\n *\n * Stagger animations are currently only supported within CSS-defined animations.\n *\n * ### The `ng-animate` CSS class\n *\n * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.\n * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).\n *\n * Therefore, animations can be applied to an element using this temporary class directly via CSS.\n *\n * ```css\n * .zipper.ng-animate {\n *   transition:0.5s linear all;\n * }\n * .zipper.ng-enter {\n *   opacity:0;\n * }\n * .zipper.ng-enter.ng-enter-active {\n *   opacity:1;\n * }\n * .zipper.ng-leave {\n *   opacity:1;\n * }\n * .zipper.ng-leave.ng-leave-active {\n *   opacity:0;\n * }\n * ```\n *\n * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove\n * the CSS class once an animation has completed.)\n *\n *\n * ### The `ng-[event]-prepare` class\n *\n * This is a special class that can be used to prevent unwanted flickering / flash of content before\n * the actual animation starts. The class is added as soon as an animation is initialized, but removed\n * before the actual animation starts (after waiting for a $digest).\n * It is also only added for *structural* animations (`enter`, `move`, and `leave`).\n *\n * In practice, flickering can appear when nesting elements with structural animations such as `ngIf`\n * into elements that have class-based animations such as `ngClass`.\n *\n * ```html\n * <div ng-class=\"{red: myProp}\">\n *   <div ng-class=\"{blue: myProp}\">\n *     <div class=\"message\" ng-if=\"myProp\"></div>\n *   </div>\n * </div>\n * ```\n *\n * It is possible that during the `enter` animation, the `.message` div will be briefly visible before it starts animating.\n * In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:\n *\n * ```css\n * .message.ng-enter-prepare {\n *   opacity: 0;\n * }\n *\n * ```\n *\n * ## JavaScript-based Animations\n *\n * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared\n * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the\n * `module.animation()` module function we can register the animation.\n *\n * Let's see an example of a enter/leave animation using `ngRepeat`:\n *\n * ```html\n * <div ng-repeat=\"item in items\" class=\"slide\">\n *   {{ item }}\n * </div>\n * ```\n *\n * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:\n *\n * ```js\n * myModule.animation('.slide', [function() {\n *   return {\n *     // make note that other events (like addClass/removeClass)\n *     // have different function input parameters\n *     enter: function(element, doneFn) {\n *       jQuery(element).fadeIn(1000, doneFn);\n *\n *       // remember to call doneFn so that angular\n *       // knows that the animation has concluded\n *     },\n *\n *     move: function(element, doneFn) {\n *       jQuery(element).fadeIn(1000, doneFn);\n *     },\n *\n *     leave: function(element, doneFn) {\n *       jQuery(element).fadeOut(1000, doneFn);\n *     }\n *   }\n * }]);\n * ```\n *\n * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as\n * greensock.js and velocity.js.\n *\n * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define\n * our animations inside of the same registered animation, however, the function input arguments are a bit different:\n *\n * ```html\n * <div ng-class=\"color\" class=\"colorful\">\n *   this box is moody\n * </div>\n * <button ng-click=\"color='red'\">Change to red</button>\n * <button ng-click=\"color='blue'\">Change to blue</button>\n * <button ng-click=\"color='green'\">Change to green</button>\n * ```\n *\n * ```js\n * myModule.animation('.colorful', [function() {\n *   return {\n *     addClass: function(element, className, doneFn) {\n *       // do some cool animation and call the doneFn\n *     },\n *     removeClass: function(element, className, doneFn) {\n *       // do some cool animation and call the doneFn\n *     },\n *     setClass: function(element, addedClass, removedClass, doneFn) {\n *       // do some cool animation and call the doneFn\n *     }\n *   }\n * }]);\n * ```\n *\n * ## CSS + JS Animations Together\n *\n * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,\n * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking\n * charge of the animation**:\n *\n * ```html\n * <div ng-if=\"bool\" class=\"slide\">\n *   Slide in and out\n * </div>\n * ```\n *\n * ```js\n * myModule.animation('.slide', [function() {\n *   return {\n *     enter: function(element, doneFn) {\n *       jQuery(element).slideIn(1000, doneFn);\n *     }\n *   }\n * }]);\n * ```\n *\n * ```css\n * .slide.ng-enter {\n *   transition:0.5s linear all;\n *   transform:translateY(-100px);\n * }\n * .slide.ng-enter.ng-enter-active {\n *   transform:translateY(0);\n * }\n * ```\n *\n * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the\n * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from\n * our own JS-based animation code:\n *\n * ```js\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element) {\n*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.\n *       return $animateCss(element, {\n *         event: 'enter',\n *         structural: true\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.\n *\n * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or\n * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that\n * data into `$animateCss` directly:\n *\n * ```js\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element) {\n *       return $animateCss(element, {\n *         event: 'enter',\n *         structural: true,\n *         addClass: 'maroon-setting',\n *         from: { height:0 },\n *         to: { height: 200 }\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * Now we can fill in the rest via our transition CSS code:\n *\n * ```css\n * /&#42; the transition tells ngAnimate to make the animation happen &#42;/\n * .slide.ng-enter { transition:0.5s linear all; }\n *\n * /&#42; this extra CSS class will be absorbed into the transition\n * since the $animateCss code is adding the class &#42;/\n * .maroon-setting { background:red; }\n * ```\n *\n * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.\n *\n * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.\n *\n * ## Animation Anchoring (via `ng-animate-ref`)\n *\n * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between\n * structural areas of an application (like views) by pairing up elements using an attribute\n * called `ng-animate-ref`.\n *\n * Let's say for example we have two views that are managed by `ng-view` and we want to show\n * that there is a relationship between two components situated in within these views. By using the\n * `ng-animate-ref` attribute we can identify that the two components are paired together and we\n * can then attach an animation, which is triggered when the view changes.\n *\n * Say for example we have the following template code:\n *\n * ```html\n * <!-- index.html -->\n * <div ng-view class=\"view-animation\">\n * </div>\n *\n * <!-- home.html -->\n * <a href=\"#/banner-page\">\n *   <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\n * </a>\n *\n * <!-- banner-page.html -->\n * <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\n * ```\n *\n * Now, when the view changes (once the link is clicked), ngAnimate will examine the\n * HTML contents to see if there is a match reference between any components in the view\n * that is leaving and the view that is entering. It will scan both the view which is being\n * removed (leave) and inserted (enter) to see if there are any paired DOM elements that\n * contain a matching ref value.\n *\n * The two images match since they share the same ref value. ngAnimate will now create a\n * transport element (which is a clone of the first image element) and it will then attempt\n * to animate to the position of the second image element in the next view. For the animation to\n * work a special CSS class called `ng-anchor` will be added to the transported element.\n *\n * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then\n * ngAnimate will handle the entire transition for us as well as the addition and removal of\n * any changes of CSS classes between the elements:\n *\n * ```css\n * .banner.ng-anchor {\n *   /&#42; this animation will last for 1 second since there are\n *          two phases to the animation (an `in` and an `out` phase) &#42;/\n *   transition:0.5s linear all;\n * }\n * ```\n *\n * We also **must** include animations for the views that are being entered and removed\n * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).\n *\n * ```css\n * .view-animation.ng-enter, .view-animation.ng-leave {\n *   transition:0.5s linear all;\n *   position:fixed;\n *   left:0;\n *   top:0;\n *   width:100%;\n * }\n * .view-animation.ng-enter {\n *   transform:translateX(100%);\n * }\n * .view-animation.ng-leave,\n * .view-animation.ng-enter.ng-enter-active {\n *   transform:translateX(0%);\n * }\n * .view-animation.ng-leave.ng-leave-active {\n *   transform:translateX(-100%);\n * }\n * ```\n *\n * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:\n * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away\n * from its origin. Once that animation is over then the `in` stage occurs which animates the\n * element to its destination. The reason why there are two animations is to give enough time\n * for the enter animation on the new element to be ready.\n *\n * The example above sets up a transition for both the in and out phases, but we can also target the out or\n * in phases directly via `ng-anchor-out` and `ng-anchor-in`.\n *\n * ```css\n * .banner.ng-anchor-out {\n *   transition: 0.5s linear all;\n *\n *   /&#42; the scale will be applied during the out animation,\n *          but will be animated away when the in animation runs &#42;/\n *   transform: scale(1.2);\n * }\n *\n * .banner.ng-anchor-in {\n *   transition: 1s linear all;\n * }\n * ```\n *\n *\n *\n *\n * ### Anchoring Demo\n *\n  <example module=\"anchoringExample\"\n           name=\"anchoringExample\"\n           id=\"anchoringExample\"\n           deps=\"angular-animate.js;angular-route.js\"\n           animations=\"true\">\n    <file name=\"index.html\">\n      <a href=\"#/\">Home</a>\n      <hr />\n      <div class=\"view-container\">\n        <div ng-view class=\"view\"></div>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])\n        .config(['$routeProvider', function($routeProvider) {\n          $routeProvider.when('/', {\n            templateUrl: 'home.html',\n            controller: 'HomeController as home'\n          });\n          $routeProvider.when('/profile/:id', {\n            templateUrl: 'profile.html',\n            controller: 'ProfileController as profile'\n          });\n        }])\n        .run(['$rootScope', function($rootScope) {\n          $rootScope.records = [\n            { id:1, title: \"Miss Beulah Roob\" },\n            { id:2, title: \"Trent Morissette\" },\n            { id:3, title: \"Miss Ava Pouros\" },\n            { id:4, title: \"Rod Pouros\" },\n            { id:5, title: \"Abdul Rice\" },\n            { id:6, title: \"Laurie Rutherford Sr.\" },\n            { id:7, title: \"Nakia McLaughlin\" },\n            { id:8, title: \"Jordon Blanda DVM\" },\n            { id:9, title: \"Rhoda Hand\" },\n            { id:10, title: \"Alexandrea Sauer\" }\n          ];\n        }])\n        .controller('HomeController', [function() {\n          //empty\n        }])\n        .controller('ProfileController', ['$rootScope', '$routeParams', function($rootScope, $routeParams) {\n          var index = parseInt($routeParams.id, 10);\n          var record = $rootScope.records[index - 1];\n\n          this.title = record.title;\n          this.id = record.id;\n        }]);\n    </file>\n    <file name=\"home.html\">\n      <h2>Welcome to the home page</h1>\n      <p>Please click on an element</p>\n      <a class=\"record\"\n         ng-href=\"#/profile/{{ record.id }}\"\n         ng-animate-ref=\"{{ record.id }}\"\n         ng-repeat=\"record in records\">\n        {{ record.title }}\n      </a>\n    </file>\n    <file name=\"profile.html\">\n      <div class=\"profile record\" ng-animate-ref=\"{{ profile.id }}\">\n        {{ profile.title }}\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      .record {\n        display:block;\n        font-size:20px;\n      }\n      .profile {\n        background:black;\n        color:white;\n        font-size:100px;\n      }\n      .view-container {\n        position:relative;\n      }\n      .view-container > .view.ng-animate {\n        position:absolute;\n        top:0;\n        left:0;\n        width:100%;\n        min-height:500px;\n      }\n      .view.ng-enter, .view.ng-leave,\n      .record.ng-anchor {\n        transition:0.5s linear all;\n      }\n      .view.ng-enter {\n        transform:translateX(100%);\n      }\n      .view.ng-enter.ng-enter-active, .view.ng-leave {\n        transform:translateX(0%);\n      }\n      .view.ng-leave.ng-leave-active {\n        transform:translateX(-100%);\n      }\n      .record.ng-anchor-out {\n        background:red;\n      }\n    </file>\n  </example>\n *\n * ### How is the element transported?\n *\n * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting\n * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element\n * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The\n * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match\n * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied\n * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class\n * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element\n * will become visible since the shim class will be removed.\n *\n * ### How is the morphing handled?\n *\n * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out\n * what CSS classes differ between the starting element and the destination element. These different CSS classes\n * will be added/removed on the anchor element and a transition will be applied (the transition that is provided\n * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will\n * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that\n * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since\n * the cloned element is placed inside of root element which is likely close to the body element).\n *\n * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.\n *\n *\n * ## Using $animate in your directive code\n *\n * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?\n * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's\n * imagine we have a greeting box that shows and hides itself when the data changes\n *\n * ```html\n * <greeting-box active=\"onOrOff\">Hi there</greeting-box>\n * ```\n *\n * ```js\n * ngModule.directive('greetingBox', ['$animate', function($animate) {\n *   return function(scope, element, attrs) {\n *     attrs.$observe('active', function(value) {\n *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');\n *     });\n *   });\n * }]);\n * ```\n *\n * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element\n * in our HTML code then we can trigger a CSS or JS animation to happen.\n *\n * ```css\n * /&#42; normally we would create a CSS class to reference on the element &#42;/\n * greeting-box.on { transition:0.5s linear all; background:green; color:white; }\n * ```\n *\n * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's\n * possible be sure to visit the {@link ng.$animate $animate service API page}.\n *\n *\n * ### Preventing Collisions With Third Party Libraries\n *\n * Some third-party frameworks place animation duration defaults across many element or className\n * selectors in order to make their code small and reuseable. This can lead to issues with ngAnimate, which\n * is expecting actual animations on these elements and has to wait for their completion.\n *\n * You can prevent this unwanted behavior by using a prefix on all your animation classes:\n *\n * ```css\n * /&#42; prefixed with animate- &#42;/\n * .animate-fade-add.animate-fade-add-active {\n *   transition:1s linear all;\n *   opacity:0;\n * }\n * ```\n *\n * You then configure `$animate` to enforce this prefix:\n *\n * ```js\n * $animateProvider.classNameFilter(/animate-/);\n * ```\n *\n * This also may provide your application with a speed boost since only specific elements containing CSS class prefix\n * will be evaluated for animation when any DOM changes occur in the application.\n *\n * ## Callbacks and Promises\n *\n * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger\n * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has\n * ended by chaining onto the returned promise that animation method returns.\n *\n * ```js\n * // somewhere within the depths of the directive\n * $animate.enter(element, parent).then(function() {\n *   //the animation has completed\n * });\n * ```\n *\n * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case\n * anymore.)\n *\n * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering\n * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view\n * routing controller to hook into that:\n *\n * ```js\n * ngModule.controller('HomePageController', ['$animate', function($animate) {\n *   $animate.on('enter', ngViewElement, function(element) {\n *     // the animation for this route has completed\n *   }]);\n * }])\n * ```\n *\n * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)\n */\n\n/**\n * @ngdoc service\n * @name $animate\n * @kind object\n *\n * @description\n * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.\n *\n * Click here {@link ng.$animate to learn more about animations with `$animate`}.\n */\nangular.module('ngAnimate', [])\n  .directive('ngAnimateSwap', ngAnimateSwapDirective)\n\n  .directive('ngAnimateChildren', $$AnimateChildrenDirective)\n  .factory('$$rAFScheduler', $$rAFSchedulerFactory)\n\n  .provider('$$animateQueue', $$AnimateQueueProvider)\n  .provider('$$animation', $$AnimationProvider)\n\n  .provider('$animateCss', $AnimateCssProvider)\n  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)\n\n  .provider('$$animateJs', $$AnimateJsProvider)\n  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);\n\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}